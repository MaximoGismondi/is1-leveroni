

----STARTUP---- (18 March 2024 23:47:48) as G:\is1-leveroni\cuis\windows64\CuisUniversity-6169.image!


----End fileIn of \is1-leveroni\forms\forms1-2-3.st----!
!AlanKay class methodsFor: '-- all --' stamp: 'mg 3/18/2024 23:52:56'!
esMayorQue: unaPersona
	| diferenciaDeEdad |
	diferenciaDeEdad := self fechaDeNacimiento distanceTo: unaPersona fechaDeNacimiento.
	^diferenciaDeEdad positive! !

!classDefinition: 'AdeleGoldberg class' category: #Form2 stamp: 'mg 3/18/2024 23:57:25'!
AdeleGoldberg class
	instanceVariableNames: 'colegaDeTrabajo'!
!AdeleGoldberg class methodsFor: '-- all --' stamp: 'mg 3/18/2024 23:59:38'!
esMenorQueSuColega
    ^colegaDeTrabajo esMayorQue: self! !

AdeleGoldberg  esMenorQueSuColega !
!AdeleGoldberg class methodsFor: '-- all --' stamp: 'mg 3/19/2024 00:01:56'!
colegaDeTrabajo
     ^colegaDeTrabajo! !

AdeleGoldberg colegaDeTrabajo!
!AdeleGoldberg class methodsFor: '--** private fileout/in **--' stamp: 'mg 3/19/2024 00:13:58' overrides: 50513977!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	colegaDeTrabajo := AlanKay.! !

!methodRemoval: AdeleGoldberg class #initializeCollaboratorsFromFile stamp: 'mg 3/19/2024 00:13:58'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	colegaDeTrabajo := AlanKay.!

‘Hola’ size.!

‘Hola’ size.!

‘Hola’ size.!

100 factorial !

'Hola'!

'Hola' size!

100 factorial. !

'hola' size even.!

'hola' size odd.!

10 + 20.!

true & false.!

‘Hola’ at: 1.!

'Hola' at: 1.!


3 between: 1 and: 5.
Array with: 1 with: 10 with: 100.
'Hola gente!!' copyFrom: 2 to: 8.!

March distanceTo: December.!

March distanceTo: December. 9 * months .!

9 * months .!

3 between: 1 and: 5.!

Array with: 1 with: 10 with: 100.!

3 between: 1 and: 5.!

'Hola' size + 'Chau' size.!

'hola', 'chau'.!

'hola', 'chau'. 'holachau' .!

'hola', 'chau' size.!

'hola', 'chau' size.!

'hola', 'chau'.!

'hola', 'chau' size.!

'hola gente!!' copyFrom: 'hola' size + 1 to: 11.!

('hola', 'chau') size.!

'hola' size next!

'hola' size!

4 nextObject !

4 nextInstance !

4 size!

'hola' size even!

6+2*5.!

(6+2)*5.!

hola!

AlanTuring hola.!
!AlanTuring class methodsFor: '-- all --' stamp: 'mg 3/19/2024 00:32:37' overrides: 50514465!
doesNotUnderstand: aMessage
	^'No entiendo lo que me decis con ', aMessage asString! !

AlanTuring hola.!

AlanTuring  chau!

AlanTuring  doesNotUnderstand!

AlanTuring  doesNotUnderstand: aaa!

AlanTuring  doesNotUnderstand: hola!

AlanTuring  doesNotUnderstand: hola asMessage!

AlanTuring  doesNotUnderstand: #hola!

AlanTuring  hola!

AlanTuring  hola!

AlanTuring  hola!
!AdeleGoldberg class methodsFor: '--** private fileout/in **--' stamp: 'mg 3/19/2024 00:39:27' overrides: 50513977!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	colegaDeTrabajo := AlanKay.! !

!methodRemoval: AdeleGoldberg class #initializeCollaboratorsFromFile stamp: 'mg 3/19/2024 00:39:27'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	colegaDeTrabajo := AlanKay.!

DenotativeObject subclass: #CloneOfJohnVonNeumann
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Form5'!

!classDefinition: #CloneOfJohnVonNeumann category: 'Form5' stamp: 'mg 3/19/2024 01:06:05'!
DenotativeObject subclass: #CloneOfJohnVonNeumann
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Form5'!

CloneOfJohnVonNeumann class
	instanceVariableNames: ''!

!classDefinition: 'CloneOfJohnVonNeumann class' category: 'Form5' stamp: 'mg 3/19/2024 01:06:05'!
CloneOfJohnVonNeumann class
	instanceVariableNames: ''!
!CloneOfJohnVonNeumann class methodsFor: '-- all --' stamp: 'mg 3/19/2024 01:06:05'!
fechaDeNacimiento
	^December/28/1903! !

(June/23/2019) = (June/23/2019).!

(June/23/2019) == (June/23/2019).!

100 factorial = 100 factorial.!

100 factorial == 100 factorial.!

('ho','la') = ('ho','la').  !

('ho','la') == ('ho', 'la').!
!AdeleGoldberg class methodsFor: '--** private fileout/in **--' stamp: 'mg 3/19/2024 01:09:39' overrides: 50513977!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	colegaDeTrabajo := AlanKay.! !

!methodRemoval: AdeleGoldberg class #initializeCollaboratorsFromFile stamp: 'mg 3/19/2024 01:09:39'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	colegaDeTrabajo := AlanKay.!

#messageList!

self messageList!

#messageList size!

list!

list size!

self selection: #fail.!

self setSelectionIndex: 1.!

self setSelectionIndex: 1.!

self setSelectionIndex: 1.!

self setSelectionIndex: 3.!

self setSelectionIndex: 1. true .!

self setSelectionIndex: 3. true .!

self selection: #fail.!

self!

self browse !

self !

DenotativeObject Browser list!

self send.!

self send. !

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

self send.!

AlanKay  esMayorQue:  JohnVonNeumann !
!AdeleGoldberg class methodsFor: '--** private fileout/in **--' stamp: 'mg 3/19/2024 01:29:50' overrides: 50513977!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	colegaDeTrabajo := AlanKay.! !

!methodRemoval: AdeleGoldberg class #initializeCollaboratorsFromFile stamp: 'mg 3/19/2024 01:29:50'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	colegaDeTrabajo := AlanKay.!

10 factorial.!

[ 10 factorial ].!

[ 10 factorial ] value.!

[ :anInteger | anInteger factorial ] value: 10.!

[ :anInteger | anInteger factorial ] value: 100.!

factorialBlock := [ :anInteger | anInteger factorial ].!

factorialBlock value: 10.!

factorialSumBlock := [ :anIntegerToFact1 :anIntegerToFact2 | anIntegerToFact1 factorial + anIntegerToFact2 factorial ].!

factorialSumBlock value: 10 value: 20.!

factorialSumBlock valueWithArguments: #(10 20)!

plusTenByTwentyBlock := [ :anAdder | 	| anAdderPlusTen | anAdderPlusTen := anAdder + 10. anAdderPlusTen * 20 ].!

plusTenByTwentyBlock value: 5.!

plusTenByTwentyBlock value: 100.!

sum := 0.!

5 timesRepeat: [ sum := sum + 10 ].!

sum.!

sum := 0.!

sum. 50 .!

[ sum < 50 ] whileTrue: [ sum := sum + 10 ].!

sum.!

10 > 5 ifTrue: [ 'Si!! Diez es mayor a cinco' ] ifFalse: [ 'No, no lo es' ].!

sum := 0.!

#(1 2 3 4 5) do: [ :anInteger | sum := sum + anInteger ].!

sum!

#(1 2 3 4 5) inject: 0 into: [ :acum :anInteger | acum + anInteger ]!
!AdeleGoldberg class methodsFor: '--** private fileout/in **--' stamp: 'mg 3/19/2024 01:44:39' overrides: 50513977!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	colegaDeTrabajo := AlanKay.! !

!methodRemoval: AdeleGoldberg class #initializeCollaboratorsFromFile stamp: 'mg 3/19/2024 01:44:39'!
initializeCollaboratorsFromFile
	"Auto generated method for loading purposes - Do not modify it"

	colegaDeTrabajo := AlanKay.!

----SNAPSHOT----(19 March 2024 01:44:43) CuisUniversity-6169.image priorSource: 6245038!

----QUIT----(19 March 2024 01:44:49) CuisUniversity-6169.image priorSource: 6255303!

----STARTUP---- (21 March 2024 00:03:06) as C:\GITHUB\is1-leveroni\cuis\windows64\CuisUniversity-6169.image!


----End fileIn of \GITHUB\is1-leveroni\forms\form8.st----!

!classDefinition: #Eminencia category: #AprendiendoObjetosConClases stamp: 'mg 3/21/2024 00:05:07'!
Object subclass: #Eminencia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AprendiendoObjetosConClases'!
!Eminencia methodsFor: '-- all --' stamp: 'mg 3/21/2024 00:05:07'!
esMayorQue: unaPersona
	| diferenciaDeEdad |
	diferenciaDeEdad := self fechaDeNacimiento distanceTo: unaPersona fechaDeNacimiento.
	^diferenciaDeEdad positive! !
!Eminencia methodsFor: '-- all --' stamp: 'mg 3/21/2024 00:05:07'!
fechaDeNacimiento
	^May/17/1940! !

alanKay := Eminencia new!

alanKay!

new!

Eminencia!

Eminencia!

this new!

adeleGoldberg := Eminencia new!

1!

self fechaDeNacimiento!

self fechaDeNacimiento!

!classDefinition: #Eminencia category: #AprendiendoObjetosConClases stamp: 'mg 3/21/2024 00:15:57'!
Object subclass: #Eminencia
	instanceVariableNames: 'fechaDeNacimiento'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AprendiendoObjetosConClases'!
!Eminencia methodsFor: '-- all --' stamp: 'mg 3/21/2024 00:15:54' prior: 50527001!
fechaDeNacimiento
    ^fechaDeNacimiento! !

!classDefinition: #Eminencia category: #AprendiendoObjetosConClases stamp: 'mg 3/21/2024 00:16:32'!
Object subclass: #Eminencia
	instanceVariableNames: 'fechaDeNacimiento nombre'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AprendiendoObjetosConClases'!
!Eminencia methodsFor: 'nil' stamp: 'mg 3/21/2024 00:16:44' overrides: 16932297!
initialize

    nombre := 'Alan Kay'.
    fechaDeNacimiento := May/17/1940! !

alanKay := Eminencia new.!

alanKay := Eminencia new.!

basicNew!

basicNew!
!Eminencia methodsFor: 'nil' stamp: 'mg 3/21/2024 00:22:03'!
inicializarCon: unNombre y: unaFechaDeNacimiento

    nombre := unNombre.
    fechaDeNacimiento := unaFechaDeNacimiento.! !

adeleGoldberg := Eminencia new inicializarCon: 'Adele Goldberg' y: July/22/1945!
!Eminencia class methodsFor: 'nil' stamp: 'mg 3/21/2024 00:24:47'!
llamada: unNombre nacidaEl: unaFecha

	^self new inicializarCon: unNombre y: unaFecha! !

Eminencia llamada: 'Alan Kay' nacidaEl: May/17/1940!

Eminencia llamada: 'Alan Kay' nacidaEl: May/17/1940!

Eminencia llamada: 'Alan Kay' nacidaEl: May/17/1940!

Object subclass: #Auto
	instanceVariableNames: 'fechaDeNacimiento nombre'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AprendiendoObjetosConClases'!

!classDefinition: #Auto category: #AprendiendoObjetosConClases stamp: 'mg 3/21/2024 00:37:42'!
Object subclass: #Auto
	instanceVariableNames: 'fechaDeNacimiento nombre'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AprendiendoObjetosConClases'!

Object subclass: #Auto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AprendiendoObjetosConClases'!

!classDefinition: #Auto category: #AprendiendoObjetosConClases stamp: 'mg 3/21/2024 00:37:49'!
Object subclass: #Auto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AprendiendoObjetosConClases'!
!Auto methodsFor: 'nil' stamp: 'mg 3/21/2024 00:38:45'!
abrirBaúl! !
!Auto methodsFor: 'as yet unclassified' stamp: 'mg 3/21/2024 00:38:55'!
cantidadDeRuedas
	^4! !

Object subclass: #Moto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AprendiendoObjetosConClases'!

!classDefinition: #Moto category: #AprendiendoObjetosConClases stamp: 'mg 3/21/2024 00:39:30'!
Object subclass: #Moto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AprendiendoObjetosConClases'!

Moto class
	instanceVariableNames: ''!

!classDefinition: 'Moto class' category: #AprendiendoObjetosConClases stamp: 'mg 3/21/2024 00:39:30'!
Moto class
	instanceVariableNames: ''!
!Moto methodsFor: 'as yet unclassified' stamp: 'mg 3/21/2024 00:39:30'!
abrirBaúl! !
!Moto methodsFor: 'as yet unclassified' stamp: 'mg 3/21/2024 00:39:30'!
cantidadDeRuedas
	^4! !
!Moto methodsFor: 'as yet unclassified' stamp: 'mg 3/21/2024 00:39:33' prior: 50527110!
cantidadDeRuedas
	^2! !

!classDefinition: #Vehículo category: #AprendiendoObjetosConClases stamp: 'mg 3/21/2024 00:40:07'!
Object subclass: #Vehículo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AprendiendoObjetosConClases'!

!classDefinition: #Auto category: #AprendiendoObjetosConClases stamp: 'mg 3/21/2024 00:40:07'!
Vehículo subclass: #Auto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AprendiendoObjetosConClases'!

Vehículo subclass: #Vehículo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AprendiendoObjetosConClases'!

Vehículo subclass: #Moto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AprendiendoObjetosConClases'!

!classDefinition: #Moto category: #AprendiendoObjetosConClases stamp: 'mg 3/21/2024 00:40:30'!
Vehículo subclass: #Moto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AprendiendoObjetosConClases'!

Vehículo subclasses!

!classDefinition: #Vehículo category: #AprendiendoObjetosConClases stamp: 'mg 3/21/2024 00:42:20'!
Object subclass: #Vehículo
	instanceVariableNames: 'combustible'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'AprendiendoObjetosConClases'!
!Vehículo methodsFor: 'nil' stamp: 'mg 3/21/2024 00:42:19'!
cargarCombustible: cantidadCombustibleACargar
	combustible := cantidadCombustibleACargar ! !

self cargarCombustible: 100!
!Vehículo methodsFor: 'nil' stamp: 'mg 3/21/2024 00:45:07'!
cantidadDeRuedas
	self subclassResponsibility! !

self subclassResponsability!

self subclassResponsability!

Vehículo  subclassResponsibility !

self subclassResponsability!

Vehículo subclassResponsability!

Vehículo subclassResponsability!

1 class.!

Number subclasses.!

Number allSubclasses. !

Integer superclass.!

Number allSubclasses.  !

Integer superclass. !

Number superclass!

Number superclass superclass !

Number superclass superclass  !

Number superclass superclass  superclass !

Number superclass superclass  superclass superclass.!

Number superclass superclass  superclass superclass superclass!

Object !

----STARTUP---- (22 March 2024 19:35:28) as C:\GITHUB\is1-leveroni\cuis\windows64\CuisUniversity-6169.image!


----End fileIn of C:\GITHUB\is1-leveroni\ejs\combatientes\Ejercicio01-codigoInicial.st----!

Object subclass: #CombateTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio01'!

!classDefinition: #CombateTest category: #Ejercicio01 stamp: 'mg 3/22/2024 19:48:47'!
Object subclass: #CombateTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio01'!

!classDefinition: #Combate category: #Ejercicio01 stamp: 'mg 3/22/2024 19:55:56'!
Object subclass: #Combate
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio01'!
!CombateTest methodsFor: 'nil' stamp: 'mg 3/22/2024 19:55:44'!
test01_xxx
	|bando1 bando2 combate ganador|
	bando1 := {Combatiente new}.
	bando2 := {}.
	
	combate := Combate entre: bando1 y: bando2.
	ganador := combate xxx
	
	self assert:  ganador = bando1
	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 19:56:34' prior: 50527463!
test01_xxx
	|bando1 bando2 combate ganador|
	bando1 := {Combatiente new}.
	bando2 := {}.
	
	combate := Combate entre: bando1 y: bando2.
	ganador := combate xxx
	
	^self assert:  ganador = bando1
	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 19:57:13' prior: 50527473!
test01_xxx
	|bando1 bando2 combate ganador|
	bando1 := {Combatiente new}.
	bando2 := {}.
	
	combate := Combate entre: bando1 y: bando2.
	ganador := combate xxx.
	
	self assert:  ganador = bando1
	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 19:57:24' prior: 50527483!
test01_xxx
	|bando1 bando2 combate ganador|
	bando1 := {Combatiente new}.
	bando2 := {}.
	
	combate := Combate entre: bando1 y: bando2.
	ganador := combate xxx.
	
	self assert:  (ganador = bando1)
	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 19:57:27' prior: 50527493!
test01_xxx
	|bando1 bando2 combate ganador|
	bando1 := {Combatiente new}.
	bando2 := {}.
	
	combate := Combate entre: bando1 y: bando2.
	ganador := combate xxx.
	
	self assert:  ganador = bando1
	! !

!testRun: #CombatientesTest #test01PuedoDefinirleUnaEstrategiaADavid stamp: 'mg 3/22/2024 19:57:30'!
PASSED!

!testRun: #CombatientesTest #test01PuedoDefinirleUnaEstrategiaADavid stamp: 'mg 3/22/2024 19:57:30'!
PASSED!

!testRun: #CombatientesTest #test02EnfocarseEnElMasSanoAtacaAlMenosDañado stamp: 'mg 3/22/2024 19:57:30'!
PASSED!

!testRun: #CombatientesTest #test03EnfocarseEnElMasSanoAtacaAlMenosDañadoNoImportaElOrden stamp: 'mg 3/22/2024 19:57:30'!
PASSED!

!testRun: #CombatientesTest #test04EnfocarseEnElMasHeridoAtacaAlMasDañado stamp: 'mg 3/22/2024 19:57:30'!
PASSED!

!testRun: #CombatientesTest #test_01_GoliatEmpiezaSano stamp: 'mg 3/22/2024 19:57:30'!
PASSED!

!testRun: #CombatientesTest #test_02_GoliatNoEstaSanoSiRecibeDaño stamp: 'mg 3/22/2024 19:57:30'!
PASSED!

!testRun: #CombatientesTest #test_03_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/22/2024 19:57:30'!
PASSED!

!testRun: #CombatientesTest #test_04_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/22/2024 19:57:30'!
PASSED!

!testRun: #CombatientesTest #test_05_GoliatPuedeRecibirDañoMultiplesVeces stamp: 'mg 3/22/2024 19:57:30'!
PASSED!

!testRun: #CombatientesTest #test_06_DavidPuedeAtacarAAlguien stamp: 'mg 3/22/2024 19:57:30'!
PASSED!

!testRun: #CombatientesTest #test_07_DavidPuedeAtacarEnemigosAsignados stamp: 'mg 3/22/2024 19:57:30'!
PASSED!

!testRun: #CombatientesTest #test_08_DavidNoAtacaAUnEnemigoNoAsignado stamp: 'mg 3/22/2024 19:57:30'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 19:57:47' prior: 50527503!
test01_xxx
	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new}.
	bando2 := {}.
	
	combate := Combate entre: bando1 y: bando2.
	ganador := combate xxx.
	
	self assert:  ganador = bando1
	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 19:57:51' prior: 50527559!
test01_xxx
	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new}.
	bando2 := {}.
	
	combate := Combate entre: bando1 y: bando2.
	ganador := combate xxx.
	
	self assert:  ganador = bando1.
	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 19:58:17' prior: 50527569!
test01_xxx
	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new}.
	bando2 := {}.
	
	combate := Combate entre: bando1 y: bando2.
	ganador := combate xxx.
	
	self assert:  ganador == bando1.
	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 19:58:24' prior: 50527579!
test01_xxx
	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new}.
	bando2 := {}.
	
	combate := Combate entre: bando1 y: bando2.
	ganador := combate xxx.
	
	self assert:  True
	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 19:58:51' prior: 50527589!
test01_xxx

	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new}.
	bando2 := {}.
	
	combate := Combate entre: bando1 y: bando2.
	ganador := combate xxx.
	
	self assert:  ganador = bando1.
	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 19:59:33' prior: 50527598!
test01_xxx
	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new}.
	bando2 := {}.
	
	combate := Combate entre: bando1 y: bando2.
	ganador := combate xxx.
	
	self assert:  ganador = bando1.
	! !

TestCase subclass: #CombateTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio01'!

!classDefinition: #CombateTest category: #Ejercicio01 stamp: 'mg 3/22/2024 20:02:26'!
TestCase subclass: #CombateTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio01'!

!testRun: #CombateTest #test01_xxx stamp: 'mg 3/22/2024 20:02:30'!
ERROR!
!Combate class methodsFor: 'instance creation' stamp: 'mg 3/22/2024 20:07:28'!
entre: bando1 y: bando2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeEntre: bando1 y: bando2 ! !
!Combate class methodsFor: 'instance creation' stamp: 'mg 3/22/2024 20:07:47' prior: 50527631!
entre: bando1 y: bando2 
	^self new initializeEntre: bando1 y: bando2 ! !

!testRun: #CombateTest #test01_xxx stamp: 'mg 3/22/2024 20:08:01'!
ERROR!

!testRun: #CombateTest #test01_xxx stamp: 'mg 3/22/2024 20:08:01'!
ERROR!

!classDefinition: #Combate category: #Ejercicio01 stamp: 'mg 3/22/2024 20:08:35'!
Object subclass: #Combate
	instanceVariableNames: 'bando1_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio01'!

!classDefinition: #Combate category: #Ejercicio01 stamp: 'mg 3/22/2024 20:08:35'!
Object subclass: #Combate
	instanceVariableNames: 'bando1_CHANGE_ME bando2_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio01'!
!Combate methodsFor: 'initialization' stamp: 'mg 3/22/2024 20:08:35'!
initializeEntre: bando1 y: bando2 
	self shouldBeImplemented.
	bando1_CHANGE_ME := bando1.
	bando2_CHANGE_ME := bando2.! !

Object subclass: #Combate
	instanceVariableNames: 'bando1 bando2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio01'!

Object subclass: #Combate
	instanceVariableNames: 'primerBando segundoBando'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio01'!

!classDefinition: #Combate category: #Ejercicio01 stamp: 'mg 3/22/2024 20:11:25'!
Object subclass: #Combate
	instanceVariableNames: 'primerBando segundoBando'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio01'!
!Combate methodsFor: 'initialization' stamp: 'mg 3/22/2024 20:11:40' prior: 50527664!
initializeEntre: bando1 y: bando2 
	
	primerBando := bando1.
	segundoBando := bando2.! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 20:12:41' prior: 50527608!
test01_xxx
	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new}.
	bando2 := {}.
	
	combate := Combate entre: bando1 y: bando2.
	ganador := combate ganador.
	
	self assert:  ganador = bando1.
	! !

!testRun: #CombateTest #test01_xxx stamp: 'mg 3/22/2024 20:12:45'!
ERROR!
!Combate methodsFor: 'getters' stamp: 'mg 3/22/2024 20:13:23'!
ganador
	self shouldBeImplemented.! !
!Combate methodsFor: 'getters' stamp: 'mg 3/22/2024 20:14:18' prior: 50527704!
ganador
	^primerBando ! !

!testRun: #CombateTest #test01_xxx stamp: 'mg 3/22/2024 20:14:28'!
PASSED!

!testRun: #CombateTest #test01_xxx stamp: 'mg 3/22/2024 20:14:35'!
PASSED!

!testRun: #CombateTest #test01_xxx stamp: 'mg 3/22/2024 20:14:35'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 20:16:53'!
test01
	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new}.
	bando2 := {}.
	
	combate := Combate entre: bando1 y: bando2.
	ganador := combate ganador.
	
	self assert:  ganador = bando1.
	! !

!methodRemoval: CombateTest #test01_xxx stamp: 'mg 3/22/2024 20:17:02'!
test01_xxx
	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new}.
	bando2 := {}.
	
	combate := Combate entre: bando1 y: bando2.
	ganador := combate ganador.
	
	self assert:  ganador = bando1.
	!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 20:17:16' prior: 50527719!
test01
	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new, Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	ganador := combate ganador.
	
	self assert:  ganador = bando1.
	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 20:17:33' prior: 50527737!
test01
	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new, Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	ganador := combate ganador.
	
	self assert:  ganador = bando1.
	! !

!testRun: #CombateTest #test01 stamp: 'mg 3/22/2024 20:18:16'!
ERROR!

!testRun: #CombateTest #test01 stamp: 'mg 3/22/2024 20:19:01'!
ERROR!

!testRun: #CombateTest #test01 stamp: 'mg 3/22/2024 20:19:01'!
ERROR!

!testRun: #CombateTest #test01 stamp: 'mg 3/22/2024 20:19:11'!
ERROR!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 20:19:29' prior: 50527748!
test01
	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	ganador := combate ganador.
	
	self assert:  ganador = bando1.
	! !

!testRun: #CombateTest #test01 stamp: 'mg 3/22/2024 20:19:32'!
ERROR!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 20:20:03' prior: 50527768!
test01
	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	ganador := combate ganador.
	
	self assert:  ganador = bando1.
	! !

!testRun: #CombateTest #test01 stamp: 'mg 3/22/2024 20:20:45'!
ERROR!
!Combate methodsFor: 'public' stamp: 'mg 3/22/2024 20:21:05'!
desarollar
	self shouldBeImplemented.! !
!Combate methodsFor: 'public' stamp: 'mg 3/22/2024 20:21:09' prior: 50527795!
desarollar
	! !

!testRun: #CombateTest #test01 stamp: 'mg 3/22/2024 20:21:12'!
PASSED!

!testRun: #CombateTest #test01 stamp: 'mg 3/22/2024 20:21:12'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 20:21:20'!
test02
	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	ganador := combate ganador.
	
	self assert:  ganador = bando1.
	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 20:21:28' prior: 50527807!
test02
	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	ganador := combate ganador.
	
	self assert:  ganador = bando1.
	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 20:21:39' prior: 50527819!
test02
	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	ganador := combate ganador.
	
	self assert:  ganador = bando2.
	! !

!testRun: #CombateTest #test02 stamp: 'mg 3/22/2024 20:21:41'!
FAILURE!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 20:50:59'!
test001
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	self deny: bando1 first estaSano.
	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 20:51:13' prior: 50527844!
test001
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	self deny: bando1 first estaSano.
	self deny: bando2 first estaSano.	! !

!testRun: #CombateTest #test001 stamp: 'mg 3/22/2024 20:51:18'!
FAILURE!

!testRun: #CombateTest #test001 stamp: 'mg 3/22/2024 20:51:27'!
FAILURE!

!testRun: #CombateTest #test001 stamp: 'mg 3/22/2024 20:51:31'!
FAILURE!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 20:51:51' prior: 50527854!
test001
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	self deny: bando1 first estaSano.
	self deny: bando2 first estaSano.	! !
!Combate class methodsFor: 'instance creation' stamp: 'mg 3/22/2024 20:53:25' prior: 50527640!
entre: bando1 y: bando2 
	bando1 first asignarEnemigos: bando2.
	bando2 first asignarEnemigos: bando1.

	^self new initializeEntre: bando1 y: bando2 ! !
!Combate methodsFor: 'public' stamp: 'mg 3/22/2024 20:54:27' prior: 50527799!
desarollar
	primerBando first atacar .
	segundoBando first atacar .
	! !
!Combate methodsFor: 'public' stamp: 'mg 3/22/2024 20:54:29' prior: 50527891!
desarollar
	primerBando first atacar.
	segundoBando first atacar.
	! !

!testRun: #CombateTest #test001 stamp: 'mg 3/22/2024 20:54:49'!
PASSED!

!testRun: #CombateTest #test001 stamp: 'mg 3/22/2024 20:54:49'!
PASSED!

!testRun: #CombateTest #test01 stamp: 'mg 3/22/2024 20:54:49'!
PASSED!

!testRun: #CombateTest #test02 stamp: 'mg 3/22/2024 20:54:49'!
FAILURE!

!testRun: #CombateTest #test02 stamp: 'mg 3/22/2024 20:54:49'!
FAILURE!

!methodRemoval: CombateTest #test01 stamp: 'mg 3/22/2024 20:59:44'!
test01
	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	ganador := combate ganador.
	
	self assert:  ganador = bando1.
	!

!methodRemoval: CombateTest #test02 stamp: 'mg 3/22/2024 20:59:47'!
test02
	|bando1 bando2 combate ganador|
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	ganador := combate ganador.
	
	self assert:  ganador = bando2.
	!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/22/2024 21:00:41'!
test01
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	self deny: bando1 first estaSano.
	self deny: bando2 first estaSano.	! !

!methodRemoval: CombateTest #test001 stamp: 'mg 3/22/2024 21:00:41'!
test001
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	self deny: bando1 first estaSano.
	self deny: bando2 first estaSano.	!

!testRun: #CombateTest #test01 stamp: 'mg 3/22/2024 21:00:46'!
PASSED!

!testRun: #CombateTest #test01 stamp: 'mg 3/22/2024 21:00:46'!
PASSED!

----STARTUP---- (25 March 2024 14:42:49) as G:\is1-leveroni\cuis\windows64\CuisUniversity-6169.image!


!classRemoval: #JohnVonNeumann stamp: 'mg 3/25/2024 14:43:40'!
DenotativeObject subclass: #JohnVonNeumann
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Form8'!

!classRemoval: #CloneOfJohnVonNeumann stamp: 'mg 3/25/2024 14:43:40'!
DenotativeObject subclass: #CloneOfJohnVonNeumann
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Form8'!

!classRemoval: #AlanTuring stamp: 'mg 3/25/2024 14:43:40'!
DenotativeObject subclass: #AlanTuring
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Form8'!

!classRemoval: #AlanKay stamp: 'mg 3/25/2024 14:43:40'!
DenotativeObject subclass: #AlanKay
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Form8'!

!classRemoval: #AdeleGoldberg stamp: 'mg 3/25/2024 14:43:40'!
DenotativeObject subclass: #AdeleGoldberg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Form8'!

----End fileIn of G:\is1-leveroni\ejs\combatientes\Ejercicio01.st----!

!methodRemoval: Combate #ganador stamp: 'mg 3/25/2024 14:44:30'!
ganador
	^primerBando !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 14:44:44' prior: 50527180!
test01
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	self deny: bando1 first estaSano.
	self deny: bando2 first estaSano.	! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 14:45:06' prior: 50527342!
desarollar
	primerBando first atacar.
	segundoBando first atacar.
	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 14:45:15'!
test02
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	self deny: bando1 first estaSano.
	self deny: bando2 first estaSano.	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 14:45:53' prior: 50527511!
test02
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new.}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	self deny: bando1 first estaSano.
	self deny: bando2 first estaSano.	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 14:46:02' prior: 50527522!
test02
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	self deny: bando1 first estaSano.
	self deny: bando2 first estaSano.	! !

!testRun: #CombateTest #test01 stamp: 'mg 3/25/2024 14:46:50'!
PASSED!

!testRun: #CombateTest #test01 stamp: 'mg 3/25/2024 14:46:50'!
PASSED!

!testRun: #CombateTest #test02 stamp: 'mg 3/25/2024 14:46:50'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 14:48:53' prior: 50527495!
test01
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	self deny: bando1 first estaSano.
	self deny: bando2 first estaSano.	! !

!testRun: #CombateTest #test01 stamp: 'mg 3/25/2024 14:49:09'!
PASSED!

!testRun: #CombateTest #test01 stamp: 'mg 3/25/2024 14:49:09'!
PASSED!

!testRun: #CombateTest #test02 stamp: 'mg 3/25/2024 14:49:09'!
PASSED!

!testRun: #CombateTest #test01 stamp: 'mg 3/25/2024 14:49:19'!
PASSED!

!testRun: #CombateTest #test01 stamp: 'mg 3/25/2024 14:49:19'!
PASSED!

!testRun: #CombateTest #test02 stamp: 'mg 3/25/2024 14:49:20'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 14:50:02' prior: 50527553!
test01
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	self Assert: bando1 first estaSano.
	self deny: bando2 first estaSano.	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 14:50:17' prior: 50527578!
test01
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	self assert: bando1 first estaSano.
	self deny: bando2 first estaSano.	! !

!testRun: #CombateTest #test01 stamp: 'mg 3/25/2024 14:50:17'!
FAILURE!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 14:52:18' prior: 50527589!
test01
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	self deny: bando1 first estaSano.
	self deny: bando2 first estaSano.	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 14:52:32' prior: 50527534!
test02
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	self deny: bando1 last estaSano.
	self deny: bando2 last estaSano.	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 14:52:58' prior: 50527614!
test02
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	self deny: bando1 first estaSano.
	self deny: bando2 first estaSano.	
	self deny: bando1 last estaSano.
	self deny: bando2 last estaSano.	! !

!testRun: #CombateTest #test02 stamp: 'mg 3/25/2024 14:52:59'!
FAILURE!
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 14:56:09' prior: 50527506!
desarollar
	primerBando do: []
	
	primerBando first atacar.
	segundoBando first atacar.
	! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 14:56:43' prior: 50527642!
desarollar
	primerBando do: [:combatiente | combatiente atacar]
	
	primerBando first atacar.
	segundoBando first atacar.
	! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 14:57:05' prior: 50527648!
desarollar
	primerBando do: [:combatiente | combatiente atacar].

	segundoBando do: [:combatiente | combatiente atacar]
	! !

!testRun: #CombateTest #test01 stamp: 'mg 3/25/2024 14:57:08'!
PASSED!

!testRun: #CombateTest #test02 stamp: 'mg 3/25/2024 14:57:08'!
FAILURE!

!testRun: #CombateTest #test02 stamp: 'mg 3/25/2024 14:57:08'!
FAILURE!
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 14:57:22' prior: 50527655!
desarollar
	primerBando do: [:combatiente | combatiente atacar].
	segundoBando do: [:combatiente | combatiente atacar]
	! !

!testRun: #CombateTest #test01 stamp: 'mg 3/25/2024 14:57:30'!
PASSED!

!testRun: #CombateTest #test01 stamp: 'mg 3/25/2024 14:57:30'!
PASSED!

!testRun: #CombateTest #test02 stamp: 'mg 3/25/2024 14:57:30'!
FAILURE!

!testRun: #CombateTest #test02 stamp: 'mg 3/25/2024 14:57:30'!
FAILURE!
!Combate class methodsFor: 'instance creation' stamp: 'mg 3/25/2024 14:58:48' prior: 50527355!
entre: bando1 y: bando2 
	bando1 do: [ :combatiente | combatiente  asignarEnemigos: bando2 ].
	bando2 do: [ :combatiente | combatiente  asignarEnemigos: bando1 ].

	^self new initializeEntre: bando1 y: bando2 ! !
!Combate class methodsFor: 'instance creation' stamp: 'mg 3/25/2024 14:59:00' prior: 50527685!
entre: bando1 y: bando2 
	bando1 do: [ :combatiente | combatiente  asignarEnemigos: bando2 ].
	bando2 do: [ :combatiente | combatiente  asignarEnemigos: bando1 ].
	
	^self new initializeEntre: bando1 y: bando2 ! !

!testRun: #CombateTest #test01 stamp: 'mg 3/25/2024 14:59:11'!
PASSED!

!testRun: #CombateTest #test01 stamp: 'mg 3/25/2024 14:59:11'!
PASSED!

!testRun: #CombateTest #test02 stamp: 'mg 3/25/2024 14:59:11'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:00:01' prior: 50527626!
test02
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	bando1 do: [ :combatiente | self deny: combatiente first estaSano.	 ].
	
	
	self deny: bando1 last estaSano.
	self deny: bando2 last estaSano.	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:00:12' prior: 50527712!
test02
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	bando1 do: [ :combatiente | self deny: combatiente first estaSano.	 ].
	bando2 do: [ :combatiente | self deny: combatiente first estaSano.	 ].! !

!testRun: #CombateTest #test02 stamp: 'mg 3/25/2024 15:00:15'!
ERROR!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:00:31' prior: 50527727!
test02
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	bando1 do: [ :combatiente | self deny: combatiente estaSano.	 ].
	bando2 do: [ :combatiente | self deny: combatiente estaSano.	 ].! !

!testRun: #CombateTest #test02 stamp: 'mg 3/25/2024 15:00:32'!
PASSED!

!testRun: #CombateTest #test01 stamp: 'mg 3/25/2024 15:00:32'!
PASSED!

!testRun: #CombateTest #test02 stamp: 'mg 3/25/2024 15:00:32'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:00:37'!
test03
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	bando1 do: [ :combatiente | self deny: combatiente estaSano.	 ].
	bando2 do: [ :combatiente | self deny: combatiente estaSano.	 ].! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:01:04'!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	bando1 do: [ :combatiente | self deny: combatiente estaSano.	 ].
	bando2 do: [ :combatiente | self deny: combatiente estaSano.	 ].! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:01:37' prior: 50527778!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	bando1 do: [ :combatiente | self deny: combatiente estaSano.	 ].
	bando2 do: [ :combatiente | self deny: combatiente estaSano.	 ].! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 15:02:36'!
desarollarRonda
	primerBando do: [:combatiente | combatiente atacar].
	segundoBando do: [:combatiente | combatiente atacar]
	! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 15:03:06' prior: 50527669!
desarollar
	self desarollarRonda
	! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 15:03:07' prior: 50527811!
desarollar
	self desarollarRonda.
	! !

!methodRemoval: CombateTest #test03 stamp: 'mg 3/25/2024 15:03:20'!
test03
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	bando1 do: [ :combatiente | self deny: combatiente estaSano.	 ].
	bando2 do: [ :combatiente | self deny: combatiente estaSano.	 ].!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 15:03:24'!
PASSED!

!testRun: #CombateTest #test01 stamp: 'mg 3/25/2024 15:03:24'!
PASSED!

!testRun: #CombateTest #test02 stamp: 'mg 3/25/2024 15:03:24'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 15:03:24'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:03:42' prior: 50527792!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollarRonda.
	
	bando1 do: [ :combatiente | self deny: combatiente estaSano.	 ].
	bando2 do: [ :combatiente | self deny: combatiente estaSano.	 ].! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:04:19' prior: 50527842!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	bando1 do: [ :combatiente | self deny: combatiente estaSano.	 ].
	bando2 do: [ :combatiente | self deny: combatiente estaSano.	 ].! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:05:27' prior: 50527856!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar. 
	
	bando1 do: [ :combatiente | self deny: combatiente estaSano.	 ].
	bando2 do: [ :combatiente | self deny: combatiente estaSano.	 ].! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:05:46' prior: 50527869!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar. 
	
	bando1 do: [ :combatiente | self deny: combatiente 	 ].
	bando2 do: [ :combatiente | self deny: combatiente estaSano.	 ].! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:06:54' prior: 50527882!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar. 
	
	self assert: bando1 first dan.
	self deny: bando2 first estaSano.	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:07:39' prior: 50527895!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar. 
	
	self assert: bando1 first dañoRecibido .
	self deny: bando2 first estaSano.	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:08:31' prior: 50527906!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar. 
	
	self assert: bando1 first estaDañadoPor: 8 .
	self deny: bando2 first estaSano.	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:08:39' prior: 50527918!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar. 
	
	self assert: bando1 first estaDañadoPor: 8 .
	self deny: bando2 first estaSano.	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:08:54' prior: 50527930!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar. 
	
	self assert: bando1 first estaDañadoPor: 8.
	self deny: bando2 first estaSano.	! !

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 15:08:59'!
ERROR!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:09:17' prior: 50527942!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar. 
	
	self assert: bando1 first estaDañadoPor: 8.
	self deny: bando2 first estaSano.	! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:09:25' prior: 50527956!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar. 
	
	self assert: bando1 first estaDañadoPor: 8.
	self assert: bando2 first estaDañadoPor: 8.! !

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 15:09:28'!
ERROR!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:09:40' prior: 50527968!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar. 
	
	self assert: (bando1 first estaDañadoPor: 8).
	self assert: (bando2 first estaDañadoPor: 8).! !

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 15:09:43'!
FAILURE!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:11:52' prior: 50527983!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollarRondas: 2. 
	
	self assert: (bando1 first estaDañadoPor: 8).
	self assert: (bando2 first estaDañadoPor: 8).! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 15:12:57'!
desarollarRondas: rondas
	rondas timesRepeat: [
		primerBando do: [:combatiente | combatiente atacar].
		segundoBando do: [:combatiente | combatiente atacar]
	]! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 15:13:12' prior: 50528010!
desarollarRondas: cantidadRondas
	cantidadRondas timesRepeat: [
		primerBando do: [:combatiente | combatiente atacar].
		segundoBando do: [:combatiente | combatiente atacar]
	]! !

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 15:13:16'!
PASSED!

!testRun: #CombateTest #test01 stamp: 'mg 3/25/2024 15:13:16'!
PASSED!

!testRun: #CombateTest #test02 stamp: 'mg 3/25/2024 15:13:16'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 15:13:16'!
PASSED!

!methodRemoval: Combate #desarollarRondas: stamp: 'mg 3/25/2024 15:14:03'!
desarollarRondas: cantidadRondas
	cantidadRondas timesRepeat: [
		primerBando do: [:combatiente | combatiente atacar].
		segundoBando do: [:combatiente | combatiente atacar]
	]!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:14:19' prior: 50527998!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar. 
	
	self assert: (bando1 first estaDañadoPor: 8).
	self assert: (bando2 first estaDañadoPor: 8).! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:17:52' prior: 50528045!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollarRonda. 	combate desarollarRonda. 
	
	
	self assert: (bando1 first estaDañadoPor: 8).
	self assert: (bando2 first estaDañadoPor: 8).! !

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 15:18:07'!
PASSED!

!testRun: #CombateTest #test01 stamp: 'mg 3/25/2024 15:18:07'!
PASSED!

!testRun: #CombateTest #test02 stamp: 'mg 3/25/2024 15:18:07'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 15:18:07'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:18:24'!
test04_hasta_la_muerte
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollarRonda. 	combate desarollarRonda. 
	
	
	self assert: (bando1 first estaDañadoPor: 8).
	self assert: (bando2 first estaDañadoPor: 8).! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:18:50'!
test04_hastaLaMuerte
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollarRonda. 	combate desarollarRonda. 
	
	
	self assert: (bando1 first estaDañadoPor: 8).
	self assert: (bando2 first estaDañadoPor: 8).! !

!methodRemoval: CombateTest #test04_hasta_la_muerte stamp: 'mg 3/25/2024 15:18:50'!
test04_hasta_la_muerte
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollarRonda. 	combate desarollarRonda. 
	
	
	self assert: (bando1 first estaDañadoPor: 8).
	self assert: (bando2 first estaDañadoPor: 8).!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:19:25'!
test01_ataquesCruzados
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	self deny: bando1 first estaSano.
	self deny: bando2 first estaSano.	! !

!methodRemoval: CombateTest #test01 stamp: 'mg 3/25/2024 15:19:25'!
test01
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	self deny: bando1 first estaSano.
	self deny: bando2 first estaSano.	!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:19:52'!
test02_atacanTodosLosCombatienetes
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	bando1 do: [ :combatiente | self deny: combatiente estaSano.	 ].
	bando2 do: [ :combatiente | self deny: combatiente estaSano.	 ].! !

!methodRemoval: CombateTest #test02 stamp: 'mg 3/25/2024 15:19:52'!
test02
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	bando1 do: [ :combatiente | self deny: combatiente estaSano.	 ].
	bando2 do: [ :combatiente | self deny: combatiente estaSano.	 ].!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:20:05'!
test02_atacanTodosLosCombatientes
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	bando1 do: [ :combatiente | self deny: combatiente estaSano.	 ].
	bando2 do: [ :combatiente | self deny: combatiente estaSano.	 ].! !

!methodRemoval: CombateTest #test02_atacanTodosLosCombatienetes stamp: 'mg 3/25/2024 15:20:05'!
test02_atacanTodosLosCombatienetes
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar.
	
	bando1 do: [ :combatiente | self deny: combatiente estaSano.	 ].
	bando2 do: [ :combatiente | self deny: combatiente estaSano.	 ].!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:20:41' prior: 50528092!
test04_hastaLaMuerte
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollarRonda. 	combate desarollarRonda. 
	
	
	self deny: (bando1 first estaMuerto).
	self assert: (bando2 first estaMuerto).! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:20:50' prior: 50528196!
test04_hastaLaMuerte
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self deny: (bando1 first estaMuerto).
	self assert: (bando2 first estaMuerto).! !

!testRun: #CombateTest #test04_hastaLaMuerte stamp: 'mg 3/25/2024 15:20:57'!
ERROR!

!testRun: #CombateTest #test04_hastaLaMuerte stamp: 'mg 3/25/2024 15:21:07'!
ERROR!
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 15:21:38'!
estaMuerto
	self shouldBeImplemented.! !
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 15:21:57' prior: 50528225!
estaMuerto
	self dañoRecibido = 20. ! !

!testRun: #CombateTest #test04_hastaLaMuerte stamp: 'mg 3/25/2024 15:22:10'!
ERROR!
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 15:25:46' prior: 50527815!
desarollar
	segundoBando first estaMuerto whileFalse: [
		self desarollarRonda.
	]
	
	! !

!testRun: #CombateTest #test04_hastaLaMuerte stamp: 'mg 3/25/2024 15:25:49'!
ERROR!

!testRun: #CombateTest #test04_hastaLaMuerte stamp: 'mg 3/25/2024 15:26:05'!
ERROR!
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 15:26:42' prior: 50528236!
desarollar
	(segundoBando first estaMuerto) whileFalse: [
		self desarollarRonda.
	]
	
	! !

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 15:26:45'!
ERROR!
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 15:27:05' prior: 50528229!
estaMuerto
	^dañoRecibido = 20. ! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 15:27:12' prior: 50528247!
desarollar
	segundoBando first estaMuerto whileFalse: [
		self desarollarRonda.
	]
	
	! !

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 15:27:15'!
ERROR!
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 15:27:42' prior: 50528260!
desarollar
	[segundoBando first estaMuerto] whileFalse: [
		self desarollarRonda.
	]
	
	! !

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 15:27:45'!
PASSED!

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/25/2024 15:27:45'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 15:27:45'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 15:27:45'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerte stamp: 'mg 3/25/2024 15:27:45'!
FAILURE!

!testRun: #CombateTest #test04_hastaLaMuerte stamp: 'mg 3/25/2024 15:27:45'!
FAILURE!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:28:08' prior: 50528057!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollarRonda. 	combate desarollarRonda. 
	
	
	self assert: (bando2 first estaDañadoPor: 8).! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:28:21' prior: 50528292!
test03_rondas
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollarRonda. 	combate desarollarRonda. 
	
	
	self assert: (bando1 first estaDañadoPor: 8).
	self assert: (bando2 first estaDañadoPor: 8).! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:28:24' prior: 50528209!
test04_hastaLaMuerte
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self assert: (bando2 first estaMuerto).! !

!testRun: #CombateTest #test04_hastaLaMuerte stamp: 'mg 3/25/2024 15:28:24'!
PASSED!

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/25/2024 15:28:24'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 15:28:24'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 15:28:24'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerte stamp: 'mg 3/25/2024 15:28:24'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:30:03'!
test04_hastaLaMuertexxx
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self assert: (bando2 first estaMuerto).! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:31:09'!
test04_hastaLaMuerteCombatienteBando2
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self assert: (bando2 first estaMuerto).! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:31:30'!
test05_
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self assert: (bando2 first estaMuerto).! !

!methodRemoval: CombateTest #test04_hastaLaMuertexxx stamp: 'mg 3/25/2024 15:31:49'!
test04_hastaLaMuertexxx
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self assert: (bando2 first estaMuerto).!

!methodRemoval: CombateTest #test04_hastaLaMuerte stamp: 'mg 3/25/2024 15:31:53'!
test04_hastaLaMuerte
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self assert: (bando2 first estaMuerto).!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:32:21' prior: 50528362!
test05_
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self deny: (bando1 first estaMuerto )! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:32:22' prior: 50528393!
test05_
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self deny: (bando1 first estaMuerto)! !

!testRun: #CombateTest #test05_ stamp: 'mg 3/25/2024 15:32:23'!
FAILURE!
!CombatientesTest methodsFor: 'tests-combatir' stamp: 'mg 3/25/2024 15:34:03'!
test_09_NoAtacaSiEstaMuerto

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	5 timesRepeat: [
    		david atacar.
	].
	
	self assert: goliat estaSano.
! !
!CombatientesTest methodsFor: 'tests-combatir' stamp: 'mg 3/25/2024 15:34:26'!
test_10_NoAtacaSiEstaMuerto

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	5 timesRepeat: [
    		david atacar.
	].
	
	self assert: goliat estaSano.
! !

!methodRemoval: CombatientesTest #test_09_NoAtacaSiEstaMuerto stamp: 'mg 3/25/2024 15:34:26'!
test_09_NoAtacaSiEstaMuerto

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	5 timesRepeat: [
    		david atacar.
	].
	
	self assert: goliat estaSano.
!
!CombatientesTest methodsFor: 'tests-combatir' stamp: 'mg 3/25/2024 15:35:08'!
test_09_MuereCuandoRecibe20DeDaño

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	self deny: goliat estaMuerto.

	5 timesRepeat: [
    		david atacar.
	].
	
	self assert: goliat estaSano.
! !
!CombatientesTest methodsFor: 'tests-combatir' stamp: 'mg 3/25/2024 15:35:18' prior: 50528442!
test_09_MuereCuandoRecibe20DeDaño

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	self deny: goliat estaMuerto.

	5 timesRepeat: [
    		david atacar.
	].
	self assert: goliat estaMuerto.
! !
!CombatientesTest methodsFor: 'tests-combatir' stamp: 'mg 3/25/2024 15:35:42' prior: 50528453!
test_09_MuereCuandoRecibe20DeDaño

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	david asignarEnemigos: {goliat}.
	
	self deny: goliat estaMuerto.

	5 timesRepeat: [
    		david atacar.
	].
	self assert: goliat estaMuerto.
! !
!CombatientesTest methodsFor: 'tests-combatir' stamp: 'mg 3/25/2024 15:35:48' prior: 50528464!
test_09_MuereCuandoRecibe20DeDaño

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	
	self deny: goliat estaMuerto.

	david asignarEnemigos: {goliat}.

	5 timesRepeat: [
    		david atacar.
	].
	self assert: goliat estaMuerto.
! !
!CombatientesTest methodsFor: 'tests-combatir' stamp: 'mg 3/25/2024 15:35:55' prior: 50528424!
test_10_NoAtacaSiEstaMuerto

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	david asignarEnemigos: {goliat}.

	5 timesRepeat: [
    		david atacar.
	].
	
	self assert: goliat estaSano.
! !
!CombatientesTest methodsFor: 'tests-combatir' stamp: 'mg 3/25/2024 15:36:35' prior: 50528488!
test_10_NoAtacaSiEstaMuerto

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	david asignarEnemigos: {goliat}.

	5 timesRepeat: [
    		david atacar.
	].
	
	goliat asignarEnemigos: {david}.
	goliat atacar.
	
	self assert: (david estaSano)
! !
!CombatientesTest methodsFor: 'tests-combatir' stamp: 'mg 3/25/2024 15:36:39' prior: 50528498!
test_10_NoAtacaSiEstaMuerto

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	david asignarEnemigos: {goliat}.

	5 timesRepeat: [
    		david atacar.
	].
	
	goliat asignarEnemigos: {david}.
	goliat atacar.
	
	self assert: david estaSano
! !

!testRun: #CombatientesTest #test_10_NoAtacaSiEstaMuerto stamp: 'mg 3/25/2024 15:36:41'!
FAILURE!
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 15:37:41' prior: 50527433!
atacar
	| victimaElegida |
	self estaMuerto ifTrue: [^self].

	enemigos isEmpty ifTrue: [^self].

	victimaElegida := self elegirVictima.
	self atacarA: victimaElegida.
! !

!testRun: #CombatientesTest #test_10_NoAtacaSiEstaMuerto stamp: 'mg 3/25/2024 15:37:46'!
PASSED!

!testRun: #CombatientesTest #test01PuedoDefinirleUnaEstrategiaADavid stamp: 'mg 3/25/2024 15:37:46'!
PASSED!

!testRun: #CombatientesTest #test02EnfocarseEnElMasSanoAtacaAlMenosDañado stamp: 'mg 3/25/2024 15:37:46'!
PASSED!

!testRun: #CombatientesTest #test03EnfocarseEnElMasSanoAtacaAlMenosDañadoNoImportaElOrden stamp: 'mg 3/25/2024 15:37:46'!
PASSED!

!testRun: #CombatientesTest #test04EnfocarseEnElMasHeridoAtacaAlMasDañado stamp: 'mg 3/25/2024 15:37:46'!
PASSED!

!testRun: #CombatientesTest #test_01_GoliatEmpiezaSano stamp: 'mg 3/25/2024 15:37:46'!
PASSED!

!testRun: #CombatientesTest #test_02_GoliatNoEstaSanoSiRecibeDaño stamp: 'mg 3/25/2024 15:37:46'!
PASSED!

!testRun: #CombatientesTest #test_03_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/25/2024 15:37:46'!
PASSED!

!testRun: #CombatientesTest #test_04_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/25/2024 15:37:46'!
PASSED!

!testRun: #CombatientesTest #test_05_GoliatPuedeRecibirDañoMultiplesVeces stamp: 'mg 3/25/2024 15:37:46'!
PASSED!

!testRun: #CombatientesTest #test_06_DavidPuedeAtacarAAlguien stamp: 'mg 3/25/2024 15:37:46'!
PASSED!

!testRun: #CombatientesTest #test_07_DavidPuedeAtacarEnemigosAsignados stamp: 'mg 3/25/2024 15:37:46'!
PASSED!

!testRun: #CombatientesTest #test_08_DavidNoAtacaAUnEnemigoNoAsignado stamp: 'mg 3/25/2024 15:37:46'!
PASSED!

!testRun: #CombatientesTest #test_09_MuereCuandoRecibe20DeDaño stamp: 'mg 3/25/2024 15:37:46'!
PASSED!

!testRun: #CombatientesTest #test_10_NoAtacaSiEstaMuerto stamp: 'mg 3/25/2024 15:37:46'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:38:27'!
test05_CombatienteBando1ViveSiMatoAlBando2
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self deny: (bando1 first estaMuerto)! !

!methodRemoval: CombateTest #test05_ stamp: 'mg 3/25/2024 15:38:27'!
test05_
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self deny: (bando1 first estaMuerto)!

!testRun: #CombateTest #test05_CombatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/25/2024 15:38:30'!
PASSED!

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/25/2024 15:38:30'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 15:38:30'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 15:38:30'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerteCombatienteBando2 stamp: 'mg 3/25/2024 15:38:30'!
PASSED!

!testRun: #CombateTest #test05_CombatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/25/2024 15:38:30'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:39:25'!
test06_combateTerminaCuandoTodosLosDelBandoMueren
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self deny: (bando1 first estaMuerto)! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:39:29'!
test06_combateTerminaCuandoTodosLosDeUnBandoMueren
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self deny: (bando1 first estaMuerto)! !

!methodRemoval: CombateTest #test06_combateTerminaCuandoTodosLosDelBandoMueren stamp: 'mg 3/25/2024 15:39:32'!
test06_combateTerminaCuandoTodosLosDelBandoMueren
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self deny: (bando1 first estaMuerto)!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:40:13' prior: 50528635!
test06_combateTerminaCuandoTodosLosDeUnBandoMueren
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self assert: (bando2 first estaMuerto).
	self assert: (bando2 last estaMuerto)! !

!testRun: #CombateTest #test06_combateTerminaCuandoTodosLosDeUnBandoMueren stamp: 'mg 3/25/2024 15:40:14'!
PASSED!

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/25/2024 15:40:14'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 15:40:14'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 15:40:14'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerteCombatienteBando2 stamp: 'mg 3/25/2024 15:40:14'!
PASSED!

!testRun: #CombateTest #test05_CombatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/25/2024 15:40:14'!
PASSED!

!testRun: #CombateTest #test06_combateTerminaCuandoTodosLosDeUnBandoMueren stamp: 'mg 3/25/2024 15:40:14'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:41:20' prior: 50528658!
test06_combateTerminaCuandoTodosLosDeUnBandoMueren
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new.}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self assert: (bando2 first estaMuerto).
	self assert: (bando2 last estaMuerto)! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:42:23' prior: 50528694!
test06_combateTerminaCuandoTodosLosDeUnBandoMueren
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.	

	
	combate desarollar . 
	
	
	self assert: (bando2 first estaMuerto).
	self assert: (bando2 last estaMuerto)! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:44:35' prior: 50528708!
test06_combateTerminaCuandoTodosLosDeUnBandoMueren
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	bando1 do: [:combatiente | combatiente enfocarseEnElMasHerido ].
	
	combate := Combate entre: bando1 y: bando2.	

	
	combate desarollar . 
	
	
	self assert: (bando2 first estaMuerto).
	self assert: (bando2 last estaMuerto)! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:45:48' prior: 50528722!
test06_combateTerminaCuandoTodosLosDeUnBandoMueren
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	bando1 do: [:combatiente | combatiente enfocarseEnElMasHerido ].
	
	combate := Combate entre: bando1 y: bando2.

	
	combate desarollar . 
	
	
	bando2 do: [:combatiente | self assert: combatiente estaMuerto ].! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 15:47:43' prior: 50528269!
desarollar
	[segundoBando last estaMuerto] whileFalse: [
		self desarollarRonda.
	]
	
	! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 15:50:47' prior: 50528753!
desarollar
	[segundoBando allSatisfy: [:combatiente | combatiente estaMuerto ]] whileFalse: [
		self desarollarRonda.
	]
	
	! !

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/25/2024 15:50:53'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 15:50:54'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 15:50:54'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerteCombatienteBando2 stamp: 'mg 3/25/2024 15:50:54'!
PASSED!

!testRun: #CombateTest #test05_CombatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/25/2024 15:50:54'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:52:54' prior: 50528738!
test06_combateTerminaCuandoTodosLosDeUnBandoMueren
	|bando1 bando2 combate |
		^self.

	! !

!testRun: #CombateTest #test06_combateTerminaCuandoTodosLosDeUnBandoMueren stamp: 'mg 3/25/2024 15:53:03'!
PASSED!

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/25/2024 15:53:03'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 15:53:03'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 15:53:03'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerteCombatienteBando2 stamp: 'mg 3/25/2024 15:53:03'!
PASSED!

!testRun: #CombateTest #test05_CombatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/25/2024 15:53:03'!
PASSED!

!testRun: #CombateTest #test06_combateTerminaCuandoTodosLosDeUnBandoMueren stamp: 'mg 3/25/2024 15:53:03'!
PASSED!

----STARTUP---- (25 March 2024 15:53:32) as G:\is1-leveroni\cuis\windows64\CuisUniversity-6169.image!


!classRemoval: #JohnVonNeumann stamp: 'mg 3/25/2024 15:53:38'!
DenotativeObject subclass: #JohnVonNeumann
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Form8'!

!classRemoval: #CloneOfJohnVonNeumann stamp: 'mg 3/25/2024 15:53:38'!
DenotativeObject subclass: #CloneOfJohnVonNeumann
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Form8'!

!classRemoval: #AlanTuring stamp: 'mg 3/25/2024 15:53:38'!
DenotativeObject subclass: #AlanTuring
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Form8'!

!classRemoval: #AlanKay stamp: 'mg 3/25/2024 15:53:38'!
DenotativeObject subclass: #AlanKay
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Form8'!

!classRemoval: #AdeleGoldberg stamp: 'mg 3/25/2024 15:53:39'!
DenotativeObject subclass: #AdeleGoldberg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Form8'!

----End fileIn of G:\is1-leveroni\cuis\windows64-UserFiles\FileOuts\Ejercicio01.st----!
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 15:55:55' prior: 50529102!
desarollar
	[primerBando allSatisfy: [:combatiente | combatiente estaMuerto ]] whileFalse: [
		self desarollarRonda.
	]
	
	! !
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 15:57:21' prior: 50529249!
estaMuerto
	^dañoRecibido >= 20. ! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 15:57:48' prior: 50529273!
desarollar
	[segundoBando allSatisfy: [:combatiente | combatiente estaMuerto ]] whileFalse: [
		self desarollarRonda.
	]
	
	! !

!testRun: #CombatientesTest #test_06_DavidPuedeAtacarAAlguien stamp: 'mg 3/25/2024 15:58:00'!
PASSED!

!testRun: #CombatientesTest #test_06_DavidPuedeAtacarAAlguien stamp: 'mg 3/25/2024 15:58:02'!
PASSED!

!testRun: #CombatientesTest #test01PuedoDefinirleUnaEstrategiaADavid stamp: 'mg 3/25/2024 15:58:02'!
PASSED!

!testRun: #CombatientesTest #test02EnfocarseEnElMasSanoAtacaAlMenosDañado stamp: 'mg 3/25/2024 15:58:02'!
PASSED!

!testRun: #CombatientesTest #test03EnfocarseEnElMasSanoAtacaAlMenosDañadoNoImportaElOrden stamp: 'mg 3/25/2024 15:58:02'!
PASSED!

!testRun: #CombatientesTest #test04EnfocarseEnElMasHeridoAtacaAlMasDañado stamp: 'mg 3/25/2024 15:58:03'!
PASSED!

!testRun: #CombatientesTest #test_01_GoliatEmpiezaSano stamp: 'mg 3/25/2024 15:58:03'!
PASSED!

!testRun: #CombatientesTest #test_02_GoliatNoEstaSanoSiRecibeDaño stamp: 'mg 3/25/2024 15:58:03'!
PASSED!

!testRun: #CombatientesTest #test_03_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/25/2024 15:58:03'!
PASSED!

!testRun: #CombatientesTest #test_04_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/25/2024 15:58:03'!
PASSED!

!testRun: #CombatientesTest #test_05_GoliatPuedeRecibirDañoMultiplesVeces stamp: 'mg 3/25/2024 15:58:03'!
PASSED!

!testRun: #CombatientesTest #test_06_DavidPuedeAtacarAAlguien stamp: 'mg 3/25/2024 15:58:03'!
PASSED!

!testRun: #CombatientesTest #test_07_DavidPuedeAtacarEnemigosAsignados stamp: 'mg 3/25/2024 15:58:03'!
PASSED!

!testRun: #CombatientesTest #test_08_DavidNoAtacaAUnEnemigoNoAsignado stamp: 'mg 3/25/2024 15:58:03'!
PASSED!

!testRun: #CombatientesTest #test_09_MuereCuandoRecibe20DeDaño stamp: 'mg 3/25/2024 15:58:03'!
PASSED!

!testRun: #CombatientesTest #test_10_NoAtacaSiEstaMuerto stamp: 'mg 3/25/2024 15:58:03'!
PASSED!

!testRun: #CombateTest #test05_CombatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/25/2024 15:58:10'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 15:58:32' prior: 50528915!
test06_combateTerminaCuandoTodosLosDeUnBandoMueren
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	combate := Combate entre: bando1 y: bando2.

	bando1 do: [:combatiente | combatiente enfocarseEnElMasHerido ].
	
	combate desarollar . 
	
	
	bando2 do: [:combatiente | self assert: combatiente estaMuerto ].! !

		segundoBando  first dañoRecibido.!

		segundoBando last dañoRecibido. 60 .!
!CombatientesTest methodsFor: 'tests-combatir' stamp: 'mg 3/25/2024 16:02:15'!
test_11_NoSeEnfocaSiEstaMuerto

	| david goliat isaac |
	david := Combatiente new.
	goliat := Combatiente new.
	isaac := 	Combatiente new.
	david asignarEnemigos: {goliat}.

	5 timesRepeat: [
    		david atacar.
	].
	
	goliat asignarEnemigos: {david}.
	goliat atacar.
	
	self assert: david estaSano
! !
!CombatientesTest methodsFor: 'tests-combatir' stamp: 'mg 3/25/2024 16:02:27' prior: 50529368!
test_11_NoSeEnfocaSiEstaMuerto

	| david goliat isaac |
	david := Combatiente new.
	goliat := Combatiente new.
	isaac := 	Combatiente new.
	david asignarEnemigos: {goliat, isaac}.

	5 timesRepeat: [
    		david atacar.
	].
	
	goliat asignarEnemigos: {david}.
	goliat atacar.
	
	self assert: david estaSano
! !
!CombatientesTest methodsFor: 'tests-combatir' stamp: 'mg 3/25/2024 16:02:47' prior: 50529381!
test_11_NoSeEnfocaSiEstaMuerto

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	david asignarEnemigos: {goliat}.

	6 timesRepeat: [
    		david atacar.
	].
	
	goliat asignarEnemigos: {david}.
	goliat atacar.
	
	self assert: david estaSano
! !
!CombatientesTest methodsFor: 'tests-combatir' stamp: 'mg 3/25/2024 16:03:39' prior: 50529394!
test_11_NoSeEnfocaSiEstaMuerto

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	david asignarEnemigos: {goliat}.

	6 timesRepeat: [
    		david atacar.
	].
		
	self assert: goliat 
! !
!CombatientesTest methodsFor: 'tests-combatir' stamp: 'mg 3/25/2024 16:04:00' prior: 50529406!
test_11_NoSeEnfocaSiEstaMuerto

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	david asignarEnemigos: {goliat}.

	6 timesRepeat: [
    		david atacar.
	].
		
	self assert: (goliat estaDañadoPor: 20).
! !
!CombatientesTest methodsFor: 'tests-estrategia' stamp: 'mg 3/25/2024 16:04:41'!
test05_NoSeEnfocaSiEstaMuerto

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	david asignarEnemigos: {goliat}.

	6 timesRepeat: [
    		david atacar.
	].
		
	self assert: (goliat estaDañadoPor: 20).
! !

!methodRemoval: CombatientesTest #test_11_NoSeEnfocaSiEstaMuerto stamp: 'mg 3/25/2024 16:04:41'!
test_11_NoSeEnfocaSiEstaMuerto

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	david asignarEnemigos: {goliat}.

	6 timesRepeat: [
    		david atacar.
	].
		
	self assert: (goliat estaDañadoPor: 20).
!

!testRun: #CombatientesTest #test05_NoSeEnfocaSiEstaMuerto stamp: 'mg 3/25/2024 16:04:48'!
FAILURE!
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:07:10' prior: 50529237!
enfocarseEnElMasSano
	estrategia := [:candidatos | candidatos filter: [:candidato | candidato estaMuerto negated ] 
		
		detectMin: [:combatiente | combatiente dañoRecibido]].
! !
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:07:24' prior: 50529450!
enfocarseEnElMasSano
	estrategia := [:candidatos | candidatos filter: [:candidato | candidato estaMuerto negated ] 		detectMin: [:combatiente | combatiente dañoRecibido]].
! !
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:07:26' prior: 50529459!
enfocarseEnElMasSano
	estrategia := [:candidatos | candidatos filter: [:candidato | candidato estaMuerto negated ] 	detectMin: [:combatiente | combatiente dañoRecibido]].
! !

!testRun: #CombatientesTest #test05_NoSeEnfocaSiEstaMuerto stamp: 'mg 3/25/2024 16:07:38'!
ERROR!
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:08:10' prior: 50529468!
enfocarseEnElMasSano
	estrategia := [:candidatos | (candidatos filter: [:candidato | candidato estaMuerto negated ]) 	detectMin: [:combatiente | combatiente dañoRecibido]].
! !
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:09:12' prior: 50529480!
enfocarseEnElMasSano
	estrategia := [:candidatos | (candidatos select: [:candidato | candidato estaMuerto negated ]) 	detectMin: [:combatiente | combatiente dañoRecibido]].
! !
!CombatientesTest methodsFor: 'tests-estrategia' stamp: 'mg 3/25/2024 16:09:38'!
test05NoSeEnfocaSiEstaMuerto

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	david asignarEnemigos: {goliat}.

	6 timesRepeat: [
    		david atacar.
	].
		
	self assert: (goliat estaDañadoPor: 20).
! !

!methodRemoval: CombatientesTest #test05_NoSeEnfocaSiEstaMuerto stamp: 'mg 3/25/2024 16:09:38'!
test05_NoSeEnfocaSiEstaMuerto

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	david asignarEnemigos: {goliat}.

	6 timesRepeat: [
    		david atacar.
	].
		
	self assert: (goliat estaDañadoPor: 20).
!

!testRun: #CombatientesTest #test05NoSeEnfocaSiEstaMuerto stamp: 'mg 3/25/2024 16:09:41'!
ERROR!
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:10:08' prior: 50529489!
enfocarseEnElMasSano
	estrategia := [:candidatos | (candidatos select: [:candidato | candidato estaMuerto not ]) 	detectMin: [:combatiente | combatiente dañoRecibido]].
! !

!testRun: #CombatientesTest #test05NoSeEnfocaSiEstaMuerto stamp: 'mg 3/25/2024 16:10:23'!
ERROR!
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:11:21' prior: 50529207!
atacar
	| victimaElegida |
	self estaMuerto ifTrue: [^self].

	victimaElegida := self elegirVictima.
	

	self atacarA: victimaElegida.
! !
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:11:35' prior: 50529534!
atacar
	| victimaElegida |
	self estaMuerto ifTrue: [^self].

	victimaElegida := self elegirVictima.
	

	self atacarA: victimaElegida.
! !

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/25/2024 16:11:36'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 16:11:36'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 16:11:36'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerteCombatienteBando2 stamp: 'mg 3/25/2024 16:11:36'!
PASSED!

!testRun: #CombateTest #test05_CombatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/25/2024 16:11:36'!
PASSED!

!testRun: #CombateTest #test06_combateTerminaCuandoTodosLosDeUnBandoMueren stamp: 'mg 3/25/2024 16:11:36'!
ERROR!

!testRun: #CombatientesTest #test01PuedoDefinirleUnaEstrategiaADavid stamp: 'mg 3/25/2024 16:11:36'!
PASSED!

!testRun: #CombatientesTest #test02EnfocarseEnElMasSanoAtacaAlMenosDañado stamp: 'mg 3/25/2024 16:11:36'!
PASSED!

!testRun: #CombatientesTest #test03EnfocarseEnElMasSanoAtacaAlMenosDañadoNoImportaElOrden stamp: 'mg 3/25/2024 16:11:36'!
PASSED!

!testRun: #CombatientesTest #test04EnfocarseEnElMasHeridoAtacaAlMasDañado stamp: 'mg 3/25/2024 16:11:36'!
PASSED!

!testRun: #CombatientesTest #test05NoSeEnfocaSiEstaMuerto stamp: 'mg 3/25/2024 16:11:36'!
ERROR!

!testRun: #CombatientesTest #test_01_GoliatEmpiezaSano stamp: 'mg 3/25/2024 16:11:36'!
PASSED!

!testRun: #CombatientesTest #test_02_GoliatNoEstaSanoSiRecibeDaño stamp: 'mg 3/25/2024 16:11:36'!
PASSED!

!testRun: #CombatientesTest #test_03_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/25/2024 16:11:37'!
PASSED!

!testRun: #CombatientesTest #test_04_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/25/2024 16:11:37'!
PASSED!

!testRun: #CombatientesTest #test_05_GoliatPuedeRecibirDañoMultiplesVeces stamp: 'mg 3/25/2024 16:11:37'!
PASSED!

!testRun: #CombatientesTest #test_06_DavidPuedeAtacarAAlguien stamp: 'mg 3/25/2024 16:11:37'!
PASSED!

!testRun: #CombatientesTest #test_07_DavidPuedeAtacarEnemigosAsignados stamp: 'mg 3/25/2024 16:11:37'!
PASSED!

!testRun: #CombatientesTest #test_08_DavidNoAtacaAUnEnemigoNoAsignado stamp: 'mg 3/25/2024 16:11:37'!
ERROR!

!testRun: #CombatientesTest #test_09_MuereCuandoRecibe20DeDaño stamp: 'mg 3/25/2024 16:11:37'!
PASSED!

!testRun: #CombatientesTest #test_10_NoAtacaSiEstaMuerto stamp: 'mg 3/25/2024 16:11:37'!
PASSED!
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:11:49' prior: 50529542!
atacar
	| victimaElegida |
	self estaMuerto ifTrue: [^self].

	enemigos isEmpty ifTrue: [^self].

	victimaElegida := self elegirVictima.
	

	self atacarA: victimaElegida.
! !

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/25/2024 16:11:50'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 16:11:50'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 16:11:50'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerteCombatienteBando2 stamp: 'mg 3/25/2024 16:11:50'!
PASSED!

!testRun: #CombateTest #test05_CombatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/25/2024 16:11:50'!
PASSED!

!testRun: #CombateTest #test06_combateTerminaCuandoTodosLosDeUnBandoMueren stamp: 'mg 3/25/2024 16:11:50'!
ERROR!

!testRun: #CombatientesTest #test01PuedoDefinirleUnaEstrategiaADavid stamp: 'mg 3/25/2024 16:11:50'!
PASSED!

!testRun: #CombatientesTest #test02EnfocarseEnElMasSanoAtacaAlMenosDañado stamp: 'mg 3/25/2024 16:11:50'!
PASSED!

!testRun: #CombatientesTest #test03EnfocarseEnElMasSanoAtacaAlMenosDañadoNoImportaElOrden stamp: 'mg 3/25/2024 16:11:50'!
PASSED!

!testRun: #CombatientesTest #test04EnfocarseEnElMasHeridoAtacaAlMasDañado stamp: 'mg 3/25/2024 16:11:50'!
PASSED!

!testRun: #CombatientesTest #test05NoSeEnfocaSiEstaMuerto stamp: 'mg 3/25/2024 16:11:50'!
ERROR!

!testRun: #CombatientesTest #test_01_GoliatEmpiezaSano stamp: 'mg 3/25/2024 16:11:50'!
PASSED!

!testRun: #CombatientesTest #test_02_GoliatNoEstaSanoSiRecibeDaño stamp: 'mg 3/25/2024 16:11:50'!
PASSED!

!testRun: #CombatientesTest #test_03_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/25/2024 16:11:50'!
PASSED!

!testRun: #CombatientesTest #test_04_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/25/2024 16:11:50'!
PASSED!

!testRun: #CombatientesTest #test_05_GoliatPuedeRecibirDañoMultiplesVeces stamp: 'mg 3/25/2024 16:11:50'!
PASSED!

!testRun: #CombatientesTest #test_06_DavidPuedeAtacarAAlguien stamp: 'mg 3/25/2024 16:11:50'!
PASSED!

!testRun: #CombatientesTest #test_07_DavidPuedeAtacarEnemigosAsignados stamp: 'mg 3/25/2024 16:11:50'!
PASSED!

!testRun: #CombatientesTest #test_08_DavidNoAtacaAUnEnemigoNoAsignado stamp: 'mg 3/25/2024 16:11:50'!
PASSED!

!testRun: #CombatientesTest #test_09_MuereCuandoRecibe20DeDaño stamp: 'mg 3/25/2024 16:11:51'!
PASSED!

!testRun: #CombatientesTest #test_10_NoAtacaSiEstaMuerto stamp: 'mg 3/25/2024 16:11:51'!
PASSED!

!testRun: #CombatientesTest #test05NoSeEnfocaSiEstaMuerto stamp: 'mg 3/25/2024 16:12:13'!
ERROR!
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:12:59' prior: 50529620!
atacar
	| victimaElegida |
	self estaMuerto ifTrue: [^self].

	enemigos isEmpty ifTrue: [^self].

	victimaElegida := self elegirVictima.
	victimaElegida 

	self atacarA: victimaElegida.
! !

!testRun: #CombateTest #test06_combateTerminaCuandoTodosLosDeUnBandoMueren stamp: 'mg 3/25/2024 16:12:59'!
ERROR!
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:14:03' prior: 50529702!
atacar
	| victimaElegida |
	self estaMuerto ifTrue: [^self].

	enemigos isEmpty ifTrue: [^self].

	victimaElegida := self elegirVictima.
	victimaElegida isNil.

	self atacarA: victimaElegida.
! !

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/25/2024 16:14:04'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 16:14:04'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 16:14:04'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerteCombatienteBando2 stamp: 'mg 3/25/2024 16:14:04'!
PASSED!

!testRun: #CombateTest #test05_CombatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/25/2024 16:14:04'!
PASSED!

!testRun: #CombateTest #test06_combateTerminaCuandoTodosLosDeUnBandoMueren stamp: 'mg 3/25/2024 16:14:04'!
ERROR!

!testRun: #CombatientesTest #test01PuedoDefinirleUnaEstrategiaADavid stamp: 'mg 3/25/2024 16:14:04'!
PASSED!

!testRun: #CombatientesTest #test02EnfocarseEnElMasSanoAtacaAlMenosDañado stamp: 'mg 3/25/2024 16:14:04'!
PASSED!

!testRun: #CombatientesTest #test03EnfocarseEnElMasSanoAtacaAlMenosDañadoNoImportaElOrden stamp: 'mg 3/25/2024 16:14:04'!
PASSED!

!testRun: #CombatientesTest #test04EnfocarseEnElMasHeridoAtacaAlMasDañado stamp: 'mg 3/25/2024 16:14:04'!
PASSED!

!testRun: #CombatientesTest #test05NoSeEnfocaSiEstaMuerto stamp: 'mg 3/25/2024 16:14:04'!
ERROR!

!testRun: #CombatientesTest #test_01_GoliatEmpiezaSano stamp: 'mg 3/25/2024 16:14:04'!
PASSED!

!testRun: #CombatientesTest #test_02_GoliatNoEstaSanoSiRecibeDaño stamp: 'mg 3/25/2024 16:14:05'!
PASSED!

!testRun: #CombatientesTest #test_03_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/25/2024 16:14:05'!
PASSED!

!testRun: #CombatientesTest #test_04_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/25/2024 16:14:05'!
PASSED!

!testRun: #CombatientesTest #test_05_GoliatPuedeRecibirDañoMultiplesVeces stamp: 'mg 3/25/2024 16:14:05'!
PASSED!

!testRun: #CombatientesTest #test_06_DavidPuedeAtacarAAlguien stamp: 'mg 3/25/2024 16:14:05'!
PASSED!

!testRun: #CombatientesTest #test_07_DavidPuedeAtacarEnemigosAsignados stamp: 'mg 3/25/2024 16:14:05'!
PASSED!

!testRun: #CombatientesTest #test_08_DavidNoAtacaAUnEnemigoNoAsignado stamp: 'mg 3/25/2024 16:14:05'!
PASSED!

!testRun: #CombatientesTest #test_09_MuereCuandoRecibe20DeDaño stamp: 'mg 3/25/2024 16:14:05'!
PASSED!

!testRun: #CombatientesTest #test_10_NoAtacaSiEstaMuerto stamp: 'mg 3/25/2024 16:14:05'!
PASSED!
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:15:44' prior: 50529715!
atacar
	| victimaElegida |
	self estaMuerto ifTrue: [^self].

	enemigos isEmpty ifTrue: [^self].

	victimaElegida := self elegirVictima.
	(victimaElegida == nil) ifTrue: [^self].

	self atacarA: victimaElegida.
! !

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/25/2024 16:15:46'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 16:15:46'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 16:15:46'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerteCombatienteBando2 stamp: 'mg 3/25/2024 16:15:46'!
PASSED!

!testRun: #CombateTest #test05_CombatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/25/2024 16:15:46'!
PASSED!
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:16:49' prior: 50529795!
atacar
	| victimaElegida |
	self estaMuerto ifTrue: [^self].
	
	victimaElegida := self elegirVictima.
	(victimaElegida == nil) ifTrue: [^self].

	self atacarA: victimaElegida.
! !

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/25/2024 16:16:51'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 16:16:51'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 16:16:51'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerteCombatienteBando2 stamp: 'mg 3/25/2024 16:16:51'!
PASSED!

!testRun: #CombateTest #test05_CombatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/25/2024 16:16:51'!
PASSED!

----STARTUP---- (25 March 2024 16:17:53) as G:\is1-leveroni\cuis\windows64\CuisUniversity-6169.image!


!classRemoval: #JohnVonNeumann stamp: 'mg 3/25/2024 16:17:59'!
DenotativeObject subclass: #JohnVonNeumann
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Form8'!

!classRemoval: #CloneOfJohnVonNeumann stamp: 'mg 3/25/2024 16:17:59'!
DenotativeObject subclass: #CloneOfJohnVonNeumann
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Form8'!

!classRemoval: #AlanTuring stamp: 'mg 3/25/2024 16:17:59'!
DenotativeObject subclass: #AlanTuring
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Form8'!

!classRemoval: #AlanKay stamp: 'mg 3/25/2024 16:17:59'!
DenotativeObject subclass: #AlanKay
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Form8'!

!classRemoval: #AdeleGoldberg stamp: 'mg 3/25/2024 16:18:00'!
DenotativeObject subclass: #AdeleGoldberg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Form8'!

----SNAPSHOT----(25 March 2024 16:18:06) CuisUniversity-6169.image priorSource: 6255393!

----End fileIn of G:\is1-leveroni\cuis\windows64-UserFiles\FileOuts\Ejercicio01.st----!

!testRun: #CombatientesTest #test01PuedoDefinirleUnaEstrategiaADavid stamp: 'mg 3/25/2024 16:18:31'!
PASSED!

!testRun: #CombatientesTest #test02EnfocarseEnElMasSanoAtacaAlMenosDañado stamp: 'mg 3/25/2024 16:18:32'!
PASSED!

!testRun: #CombatientesTest #test03EnfocarseEnElMasSanoAtacaAlMenosDañadoNoImportaElOrden stamp: 'mg 3/25/2024 16:18:33'!
PASSED!

!testRun: #CombatientesTest #test04EnfocarseEnElMasHeridoAtacaAlMasDañado stamp: 'mg 3/25/2024 16:18:34'!
PASSED!

!testRun: #CombatientesTest #test05NoSeEnfocaSiEstaMuerto stamp: 'mg 3/25/2024 16:18:36'!
PASSED!
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:19:30' prior: 50530280!
enfocarseEnElMasHerido
	estrategia := [:candidatos | (candidatos select: [:candidato | candidato estaMuerto not ]) 	detectMax: [:combatiente | combatiente dañoRecibido]].
! !

!testRun: #CombatientesTest #test01PuedoDefinirleUnaEstrategiaADavid stamp: 'mg 3/25/2024 16:19:42'!
PASSED!

!testRun: #CombatientesTest #test02EnfocarseEnElMasSanoAtacaAlMenosDañado stamp: 'mg 3/25/2024 16:19:42'!
PASSED!

!testRun: #CombatientesTest #test03EnfocarseEnElMasSanoAtacaAlMenosDañadoNoImportaElOrden stamp: 'mg 3/25/2024 16:19:42'!
PASSED!

!testRun: #CombatientesTest #test04EnfocarseEnElMasHeridoAtacaAlMasDañado stamp: 'mg 3/25/2024 16:19:42'!
PASSED!

!testRun: #CombatientesTest #test05NoSeEnfocaSiEstaMuerto stamp: 'mg 3/25/2024 16:19:42'!
PASSED!

!testRun: #CombatientesTest #test_01_GoliatEmpiezaSano stamp: 'mg 3/25/2024 16:19:46'!
PASSED!

!testRun: #CombatientesTest #test_02_GoliatNoEstaSanoSiRecibeDaño stamp: 'mg 3/25/2024 16:19:46'!
PASSED!

!testRun: #CombatientesTest #test_03_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/25/2024 16:19:46'!
PASSED!

!testRun: #CombatientesTest #test_04_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/25/2024 16:19:46'!
PASSED!

!testRun: #CombatientesTest #test_05_GoliatPuedeRecibirDañoMultiplesVeces stamp: 'mg 3/25/2024 16:19:46'!
PASSED!

!testRun: #CombatientesTest #test_06_DavidPuedeAtacarAAlguien stamp: 'mg 3/25/2024 16:19:46'!
PASSED!

!testRun: #CombatientesTest #test_07_DavidPuedeAtacarEnemigosAsignados stamp: 'mg 3/25/2024 16:19:46'!
PASSED!

!testRun: #CombatientesTest #test_08_DavidNoAtacaAUnEnemigoNoAsignado stamp: 'mg 3/25/2024 16:19:46'!
PASSED!

!testRun: #CombatientesTest #test_09_MuereCuandoRecibe20DeDaño stamp: 'mg 3/25/2024 16:19:46'!
PASSED!

!testRun: #CombatientesTest #test_10_NoAtacaSiEstaMuerto stamp: 'mg 3/25/2024 16:19:46'!
PASSED!

!testRun: #CombateTest #test06_combateTerminaCuandoTodosLosDeUnBandoMueren stamp: 'mg 3/25/2024 16:19:57'!
PASSED!

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/25/2024 16:19:57'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 16:19:57'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 16:19:57'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerteCombatienteBando2 stamp: 'mg 3/25/2024 16:19:57'!
PASSED!

!testRun: #CombateTest #test05_CombatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/25/2024 16:19:57'!
PASSED!

!testRun: #CombateTest #test06_combateTerminaCuandoTodosLosDeUnBandoMueren stamp: 'mg 3/25/2024 16:19:57'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:20:50'!
test06_finalizaCuandoMuereAlgunBando
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new. Combatiente new}.
	bando2 := {Combatiente new. Combatiente new}.
	combate := Combate entre: bando1 y: bando2.

	bando1 do: [:combatiente | combatiente enfocarseEnElMasHerido ].
	
	combate desarollar . 
	
	
	bando2 do: [:combatiente | self assert: combatiente estaMuerto ].! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:21:13' prior: 50530426!
test06_finalizaCuandoMuereAlgunBando
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new.}.
	bando2 := {Combatiente new. Combatiente new}.
	combate := Combate entre: bando1 y: bando2.

	bando1 do: [:combatiente | combatiente enfocarseEnElMasHerido ].
	
	combate desarollar . 
	
	
	bando2 do: [:combatiente | self assert: combatiente estaMuerto ].! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:21:24' prior: 50530441!
test06_finalizaCuandoMuereAlgunBando
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new.}.
	bando2 := {Combatiente new. Combatiente new}.
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	bando2 do: [:combatiente | self assert: combatiente estaMuerto ].! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:21:43' prior: 50530456!
test06_finalizaCuandoMuereAlgunBando
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new.}.
	bando2 := {Combatiente new. Combatiente new}.
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	bando1 do: [:combatiente | self assert: combatiente estaMuerto ].! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:21:53' prior: 50530469!
test06_finalizaCuandoMuereAlgunBando
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new.}.
	bando2 := {Combatiente new. Combatiente new}.
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	bando1 do: [:combatiente | self assert: combatiente estaMuerto ].! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 16:23:07' prior: 50530150!
desarollar
	[
		(primerBando allSatisfy: [:combatiente | combatiente estaMuerto ]) | (segundoBando allSatisfy: [:combatiente | combatiente estaMuerto ]) 
	] whileFalse: [
		self desarollarRonda.
	]
	
	! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 16:23:29' prior: 50530494!
desarollar
	[
		(primerBando allSatisfy: [:combatiente | combatiente estaMuerto ]) 
		|
		(segundoBando allSatisfy: [:combatiente | combatiente estaMuerto ]) 
	] whileFalse: [
		self desarollarRonda.
	]
	
	! !

!testRun: #CombateTest #test06_finalizaCuandoMuereAlgunBando stamp: 'mg 3/25/2024 16:23:39'!
PASSED!

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/25/2024 16:23:39'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 16:23:39'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 16:23:39'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerteCombatienteBando2 stamp: 'mg 3/25/2024 16:23:39'!
PASSED!

!testRun: #CombateTest #test05_CombatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/25/2024 16:23:39'!
PASSED!

!testRun: #CombateTest #test06_combateTerminaCuandoTodosLosDeUnBandoMueren stamp: 'mg 3/25/2024 16:23:39'!
PASSED!

!testRun: #CombateTest #test06_finalizaCuandoMuereAlgunBando stamp: 'mg 3/25/2024 16:23:39'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:23:50'!
test07_finalizaCuandoMuereAlgunBando
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new.}.
	bando2 := {Combatiente new. Combatiente new}.
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	bando1 do: [:combatiente | self assert: combatiente estaMuerto ].! !

!methodRemoval: CombateTest #test06_finalizaCuandoMuereAlgunBando stamp: 'mg 3/25/2024 16:23:50'!
test06_finalizaCuandoMuereAlgunBando
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new.}.
	bando2 := {Combatiente new. Combatiente new}.
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	bando1 do: [:combatiente | self assert: combatiente estaMuerto ].!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:24:32'!
test08_xxx
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new.}.
	bando2 := {Combatiente new. Combatiente new}.
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	bando1 do: [:combatiente | self assert: combatiente estaMuerto ].! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:24:36'!
test05_combatienteBando1ViveSiMatoAlBando2
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self deny: (bando1 first estaMuerto)! !

!methodRemoval: CombateTest #test05_CombatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/25/2024 16:24:37'!
test05_CombatienteBando1ViveSiMatoAlBando2
	|bando1 bando2 combate |
	
	bando1 := {Combatiente new}.
	bando2 := {Combatiente new}.
	
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self deny: (bando1 first estaMuerto)!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:26:21' prior: 50530561!
test08_xxx
	|bando1 bando2 combate |	
	
	bando1 := {Combatiente new.}.
	bando2 := {Combatiente new.}.
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self assert: combate obtenerRondas = 5.! !

!classDefinition: #Combate category: #Ejercicio01 stamp: 'mg 3/25/2024 16:26:44'!
Object subclass: #Combate
	instanceVariableNames: 'primerBando segundoBando rondas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio01'!
!Combate methodsFor: 'nil' stamp: 'mg 3/25/2024 16:26:38'!
obtenerRondas
	^rondas! !

!testRun: #CombateTest #test08_xxx stamp: 'mg 3/25/2024 16:26:56'!
FAILURE!
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 16:27:26' prior: 50530503!
desarollar
	[
		(primerBando allSatisfy: [:combatiente | combatiente estaMuerto ]) 
		|
		(segundoBando allSatisfy: [:combatiente | combatiente estaMuerto ]) 
	] whileFalse: [
		self desarollarRonda.
		rondas := rondas +1
	]
	
	! !
!Combate methodsFor: 'initialization' stamp: 'mg 3/25/2024 16:27:39' prior: 50530145!
initializeEntre: bando1 y: bando2 
	
	primerBando := bando1.
	segundoBando := bando2.
	
	rondas :=0! !

!testRun: #CombateTest #test08_xxx stamp: 'mg 3/25/2024 16:27:48'!
PASSED!

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/25/2024 16:27:48'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 16:27:48'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 16:27:48'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerteCombatienteBando2 stamp: 'mg 3/25/2024 16:27:48'!
PASSED!

!testRun: #CombateTest #test05_combatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/25/2024 16:27:48'!
PASSED!

!testRun: #CombateTest #test06_combateTerminaCuandoTodosLosDeUnBandoMueren stamp: 'mg 3/25/2024 16:27:48'!
PASSED!

!testRun: #CombateTest #test07_finalizaCuandoMuereAlgunBando stamp: 'mg 3/25/2024 16:27:48'!
PASSED!

!testRun: #CombateTest #test08_xxx stamp: 'mg 3/25/2024 16:27:48'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:27:54'!
test08_obtenerRondas
	|bando1 bando2 combate |	
	
	bando1 := {Combatiente new.}.
	bando2 := {Combatiente new.}.
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self assert: combate obtenerRondas = 5.! !

!methodRemoval: CombateTest #test08_xxx stamp: 'mg 3/25/2024 16:28:02'!
test08_xxx
	|bando1 bando2 combate |	
	
	bando1 := {Combatiente new.}.
	bando2 := {Combatiente new.}.
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	
	self assert: combate obtenerRondas = 5.!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:28:23'!
test08_obtenerGanador
	|bando1 bando2 combate ganador |	
	
	bando1 := {Combatiente new.}.
	bando2 := {Combatiente new.}.
	combate := Combate entre: bando1 y: bando2.
	
	ganador := combate desarollar . 
	
	
	self assert: combate obtenerRondas = 5.! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:28:36' prior: 50530681!
test08_obtenerGanador
	|bando1 bando2 combate ganador |	
	
	bando1 := {Combatiente new.}.
	bando2 := {Combatiente new.}.
	combate := Combate entre: bando1 y: bando2.
	
	ganador := combate desarollar . 
	
	
	self assert: ganador = bando1! !

!testRun: #CombateTest #test08_obtenerGanador stamp: 'mg 3/25/2024 16:28:41'!
FAILURE!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:28:59'!
test09_obtenerGanador
	|bando1 bando2 combate ganador |	
	
	bando1 := {Combatiente new.}.
	bando2 := {Combatiente new.}.
	combate := Combate entre: bando1 y: bando2.
	
	ganador := combate desarollar . 
	
	
	self assert: ganador = bando1! !

!methodRemoval: CombateTest #test08_obtenerGanador stamp: 'mg 3/25/2024 16:28:59'!
test08_obtenerGanador
	|bando1 bando2 combate ganador |	
	
	bando1 := {Combatiente new.}.
	bando2 := {Combatiente new.}.
	combate := Combate entre: bando1 y: bando2.
	
	ganador := combate desarollar . 
	
	
	self assert: ganador = bando1!
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 16:30:31' prior: 50530618!
desarollar
	[
		(primerBando allSatisfy: [:combatiente | combatiente estaMuerto ]) 
		|
		(segundoBando allSatisfy: [:combatiente | combatiente estaMuerto ]) 
	] whileFalse: [
		self desarollarRonda.
		rondas := rondas +1
	].

	(primerBando allSatisfy: [:combatiente | combatiente estaMuerto ]) ifTrue: [^segundoBando ] ifFalse: [^primerBando]
	
	! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 16:31:14' prior: 50530726!
desarollar
	[
		(primerBando allSatisfy: [:combatiente | combatiente estaMuerto ]) 
		|
		(segundoBando allSatisfy: [:combatiente | combatiente estaMuerto ]) 
	] whileFalse: [
		self desarollarRonda.
		rondas := rondas +1
	].

	(primerBando allSatisfy: [:combatiente | combatiente estaMuerto ])
		ifTrue: [^segundoBando ]
		ifFalse: [^primerBando]
	
	! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 16:32:07'!
estaMuerto

	^ primerBando allSatisfy: [:combatiente | combatiente estaMuerto ]! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 16:32:08' prior: 50530740!
desarollar
	[
		(self estaMuerto) 
		|
		(segundoBando allSatisfy: [:combatiente | combatiente estaMuerto ]) 
	] whileFalse: [
		self desarollarRonda.
		rondas := rondas +1
	].

	(primerBando allSatisfy: [:combatiente | combatiente estaMuerto ])
		ifTrue: [^segundoBando ]
		ifFalse: [^primerBando]
	
	! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 16:32:08' prior: 50530760!
desarollar
	[
		(self estaMuerto) 
		|
		(segundoBando allSatisfy: [:combatiente | combatiente estaMuerto ]) 
	] whileFalse: [
		self desarollarRonda.
		rondas := rondas +1
	].

	(self estaMuerto)
		ifTrue: [^segundoBando ]
		ifFalse: [^primerBando]
	
	! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 16:32:18'!
estaMuerto: bando

	^ bando allSatisfy: [:combatiente | combatiente estaMuerto ]! !

!methodRemoval: Combate #estaMuerto stamp: 'mg 3/25/2024 16:32:22'!
estaMuerto

	^ primerBando allSatisfy: [:combatiente | combatiente estaMuerto ]!
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 16:33:26' prior: 50530773!
desarollar
	[ (self estaMuerto: primerBando	)	| (self estaMuerto: segundoBando)	] whileFalse: [
		self desarollarRonda.
		rondas := rondas +1
	].

	(self estaMuerto)
		ifTrue: [^segundoBando ]
		ifFalse: [^primerBando]
	
	! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 16:33:36' prior: 50530793!
desarollar
	[ (self estaMuerto: primerBando	)	| (self estaMuerto: segundoBando)	] 
		whileFalse: [
			self desarollarRonda.
			rondas := rondas +1
		].

	(self estaMuerto)
		ifTrue: [^segundoBando ]
		ifFalse: [^primerBando]
	
	! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 16:33:47' prior: 50530803!
desarollar
	[ (self estaMuerto: primerBando	)	| (self estaMuerto: segundoBando)	] 
		whileFalse: [
			self desarollarRonda.
			rondas := rondas +1
		].

	(self estaMuerto: primerBando	)
		ifTrue: [^segundoBando ]
		ifFalse: [^primerBando]
	
	! !

!testRun: #CombateTest #test09_obtenerGanador stamp: 'mg 3/25/2024 16:33:54'!
PASSED!

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/25/2024 16:33:54'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 16:33:54'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 16:33:54'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerteCombatienteBando2 stamp: 'mg 3/25/2024 16:33:55'!
PASSED!

!testRun: #CombateTest #test05_combatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/25/2024 16:33:55'!
PASSED!

!testRun: #CombateTest #test06_combateTerminaCuandoTodosLosDeUnBandoMueren stamp: 'mg 3/25/2024 16:33:55'!
PASSED!

!testRun: #CombateTest #test07_finalizaCuandoMuereAlgunBando stamp: 'mg 3/25/2024 16:33:55'!
PASSED!

!testRun: #CombateTest #test08_obtenerRondas stamp: 'mg 3/25/2024 16:33:55'!
PASSED!

!testRun: #CombateTest #test09_obtenerGanador stamp: 'mg 3/25/2024 16:33:55'!
PASSED!
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:39:24'!
test10_cuanBienGano
	|bando1 bando2 combate promedio |	
	
	bando1 := {Combatiente new. Combatiente new.}.
	bando2 := {Combatiente new. }.
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	promedio  := combate promedioVidaGanador
	
	
	self assert: promedio = 16! !
!Combate methodsFor: 'nil' stamp: 'mg 3/25/2024 16:40:41'!
anali! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:40:49'!
test10_promedioVidaGanador
	|bando1 bando2 combate promedio |	
	
	bando1 := {Combatiente new. Combatiente new.}.
	bando2 := {Combatiente new. }.
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	promedio  := combate promedioVidaGanador
	
	
	self assert: promedio = 16! !

!methodRemoval: CombateTest #test10_cuanBienGano stamp: 'mg 3/25/2024 16:40:52'!
test10_cuanBienGano
	|bando1 bando2 combate promedio |	
	
	bando1 := {Combatiente new. Combatiente new.}.
	bando2 := {Combatiente new. }.
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 
	
	promedio  := combate promedioVidaGanador
	
	
	self assert: promedio = 16!
!Combate methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:40:57'!
promedioVidaGanador! !

!methodRemoval: Combate #anali stamp: 'mg 3/25/2024 16:40:58'!
anali!
!Combate methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:41:56' prior: 50530892!
promedioVidaGanador

	(self estaMuerto: primerBando) ifTrue: [].
	(self estaMuerto: segundoBando) ifTrue: [].! !
!Combate methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:43:44' prior: 50530898!
promedioVidaGanador

	(self estaMuerto: primerBando) ifTrue: [
		^primerBando average: [:combatiente | ^20 - combatiente dañoRecibido ]
		].
	(self estaMuerto: segundoBando) ifTrue: [].! !
!Combate methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:44:07' prior: 50530905!
promedioVidaGanador

	(self estaMuerto: primerBando) ifTrue: [
		^primerBando average: [:combatiente | ^20 - combatiente dañoRecibido ]
		].
	(self estaMuerto: segundoBando) ifTrue: [
		^segundoBando average: [:combatiente | ^20 - combatiente dañoRecibido ]
		].! !
!CombatientesTest methodsFor: 'tests-combatir' stamp: 'mg 3/25/2024 16:44:40'!
test_11_ObtenerVida

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	david asignarEnemigos: {goliat}.

	2 timesRepeat: [
    		david atacar.
	].
	
	goliat asignarEnemigos: {david}.
	goliat atacar.
	
	self assert: david estaSano
! !
!CombatientesTest methodsFor: 'tests-combatir' stamp: 'mg 3/25/2024 16:45:41' prior: 50530925!
test_11_ObtenerVida

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	david asignarEnemigos: {goliat}.

	2 timesRepeat: [
    		david atacar.
	].	
	self assert: (goliat  = 12)
! !
!CombatientesTest methodsFor: 'tests-combatir' stamp: 'mg 3/25/2024 16:46:01' prior: 50530937!
test_11_ObtenerVida

	| david goliat |
	david := Combatiente new.
	goliat := Combatiente new.
	david asignarEnemigos: {goliat}.

	2 timesRepeat: [
    		david atacar.
	].	
	self assert: (goliat vidaActual  = 12)
! !

!testRun: #CombatientesTest #test_11_ObtenerVida stamp: 'mg 3/25/2024 16:46:06'!
ERROR!
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:46:14'!
vidaActual
	self shouldBeImplemented.! !
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:46:38' prior: 50530959!
vidaActual
	^20 - self dañoRecibido! !

!testRun: #CombatientesTest #test_11_ObtenerVida stamp: 'mg 3/25/2024 16:46:44'!
PASSED!

!testRun: #CombatientesTest #test01PuedoDefinirleUnaEstrategiaADavid stamp: 'mg 3/25/2024 16:46:44'!
PASSED!

!testRun: #CombatientesTest #test02EnfocarseEnElMasSanoAtacaAlMenosDañado stamp: 'mg 3/25/2024 16:46:44'!
PASSED!

!testRun: #CombatientesTest #test03EnfocarseEnElMasSanoAtacaAlMenosDañadoNoImportaElOrden stamp: 'mg 3/25/2024 16:46:44'!
PASSED!

!testRun: #CombatientesTest #test04EnfocarseEnElMasHeridoAtacaAlMasDañado stamp: 'mg 3/25/2024 16:46:44'!
PASSED!

!testRun: #CombatientesTest #test05NoSeEnfocaSiEstaMuerto stamp: 'mg 3/25/2024 16:46:44'!
PASSED!

!testRun: #CombatientesTest #test_01_GoliatEmpiezaSano stamp: 'mg 3/25/2024 16:46:44'!
PASSED!

!testRun: #CombatientesTest #test_02_GoliatNoEstaSanoSiRecibeDaño stamp: 'mg 3/25/2024 16:46:44'!
PASSED!

!testRun: #CombatientesTest #test_03_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/25/2024 16:46:44'!
PASSED!

!testRun: #CombatientesTest #test_04_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/25/2024 16:46:44'!
PASSED!

!testRun: #CombatientesTest #test_05_GoliatPuedeRecibirDañoMultiplesVeces stamp: 'mg 3/25/2024 16:46:44'!
PASSED!

!testRun: #CombatientesTest #test_06_DavidPuedeAtacarAAlguien stamp: 'mg 3/25/2024 16:46:44'!
PASSED!

!testRun: #CombatientesTest #test_07_DavidPuedeAtacarEnemigosAsignados stamp: 'mg 3/25/2024 16:46:44'!
PASSED!

!testRun: #CombatientesTest #test_08_DavidNoAtacaAUnEnemigoNoAsignado stamp: 'mg 3/25/2024 16:46:44'!
PASSED!

!testRun: #CombatientesTest #test_09_MuereCuandoRecibe20DeDaño stamp: 'mg 3/25/2024 16:46:44'!
PASSED!

!testRun: #CombatientesTest #test_10_NoAtacaSiEstaMuerto stamp: 'mg 3/25/2024 16:46:44'!
PASSED!

!testRun: #CombatientesTest #test_11_ObtenerVida stamp: 'mg 3/25/2024 16:46:44'!
PASSED!
!Combate methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:47:05' prior: 50530914!
promedioVidaGanador

	(self estaMuerto: primerBando) ifTrue: [
		^primerBando average: [:combatiente | ^combatiente  vidaActual ]
		].
	(self estaMuerto: segundoBando) ifTrue: [
		^segundoBando average: [:combatiente | ^20 - combatiente dañoRecibido ]
		].! !
!Combate methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:47:09' prior: 50531025!
promedioVidaGanador

	(self estaMuerto: primerBando) ifTrue: [
		^primerBando average: [:combatiente | ^combatiente  vidaActual ]
		].
	(self estaMuerto: segundoBando) ifTrue: [
		^segundoBando average: [:combatiente | ^combatiente  vidaActual ]
		].! !
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:47:26' prior: 50530301!
estaMuerto
	^self vida = 0. ! !
!CombateTest methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:48:17' prior: 50530868!
test10_promedioVidaGanador
	|bando1 bando2 combate |	
	
	bando1 := {Combatiente new. Combatiente new.}.
	bando2 := {Combatiente new. }.
	combate := Combate entre: bando1 y: bando2.
	
	combate desarollar . 	
	
	self assert: combate promedioVidaGanador = 16.! !

!testRun: #CombateTest #test10_promedioVidaGanador stamp: 'mg 3/25/2024 16:48:31'!
ERROR!
!Combatiente methodsFor: 'public' stamp: 'mg 3/25/2024 16:48:48' prior: 50531047!
estaMuerto
	^self vidaActual = 0. ! !

!testRun: #CombateTest #test10_promedioVidaGanador stamp: 'mg 3/25/2024 16:48:53'!
FAILURE!
!Combate methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:49:26' prior: 50531036!
promedioVidaGanador

	(self estaMuerto: primerBando) ifTrue: [
		^segundoBando average: [:combatiente | ^combatiente  vidaActual ]
		].
	(self estaMuerto: segundoBando) ifTrue: [
		^primerBando average: [:combatiente | ^combatiente  vidaActual ]
		].! !

!testRun: #CombateTest #test10_promedioVidaGanador stamp: 'mg 3/25/2024 16:49:31'!
PASSED!

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/25/2024 16:49:31'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/25/2024 16:49:31'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/25/2024 16:49:31'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerteCombatienteBando2 stamp: 'mg 3/25/2024 16:49:31'!
PASSED!

!testRun: #CombateTest #test05_combatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/25/2024 16:49:31'!
PASSED!

!testRun: #CombateTest #test06_combateTerminaCuandoTodosLosDeUnBandoMueren stamp: 'mg 3/25/2024 16:49:31'!
PASSED!

!testRun: #CombateTest #test07_finalizaCuandoMuereAlgunBando stamp: 'mg 3/25/2024 16:49:31'!
PASSED!

!testRun: #CombateTest #test08_obtenerRondas stamp: 'mg 3/25/2024 16:49:31'!
PASSED!

!testRun: #CombateTest #test09_obtenerGanador stamp: 'mg 3/25/2024 16:49:32'!
PASSED!

!testRun: #CombateTest #test10_promedioVidaGanador stamp: 'mg 3/25/2024 16:49:32'!
PASSED!
!Combate methodsFor: 'nil' stamp: 'mg 3/25/2024 16:51:01'!
ganador
	! !
!Combate methodsFor: 'public' stamp: 'mg 3/25/2024 16:51:22' prior: 50530813!
desarollar
	[ (self estaMuerto: primerBando	)	| (self estaMuerto: segundoBando)	] 
		whileFalse: [
			self desarollarRonda.
			rondas := rondas +1
		].

	^self ganador
	
	! !
!Combate methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:51:45' prior: 50531115!
ganador
	(self estaMuerto: primerBando	)
		ifTrue: [^segundoBando ].
		
	(self estaMuerto: primerBando	)
		ifTrue: [^primerBando ]		! !
!Combate methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:51:58' prior: 50531127!
ganador
	(self estaMuerto: primerBando	)
		ifTrue: [^segundoBando ].
		
	(self estaMuerto: segundoBando	)
		ifTrue: [^primerBando ]		! !
!Combate methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:52:28' prior: 50531072!
promedioVidaGanador
	^self ganador average: [:combatiente | ^combatiente  vidaActual ]! !
!Combate methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:52:58' prior: 50531143!
promedioVidaGanador
	
	self ganador = nil ifTrue: [^self].

	^self ganador average: [:combatiente | ^combatiente  vidaActual ]! !
!Combate methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:53:27' prior: 50531149!
promedioVidaGanador
	
	self ganador = nil ifTrue: [^self].
	^self ganador average: [:combatiente | ^combatiente  vidaActual ]! !
!Combate methodsFor: 'as yet unclassified' stamp: 'mg 3/25/2024 16:53:32' prior: 50531156!
promedioVidaGanador
	
	self ganador = nil ifTrue: [^self].
	
	^self ganador average: [:combatiente | ^combatiente  vidaActual ]! !

!testRun: #CombatientesTest #test_11_ObtenerVida stamp: 'mg 3/25/2024 16:53:38'!
PASSED!

!testRun: #CombatientesTest #test01PuedoDefinirleUnaEstrategiaADavid stamp: 'mg 3/25/2024 16:53:38'!
PASSED!

!testRun: #CombatientesTest #test02EnfocarseEnElMasSanoAtacaAlMenosDañado stamp: 'mg 3/25/2024 16:53:39'!
PASSED!

!testRun: #CombatientesTest #test03EnfocarseEnElMasSanoAtacaAlMenosDañadoNoImportaElOrden stamp: 'mg 3/25/2024 16:53:39'!
PASSED!

!testRun: #CombatientesTest #test04EnfocarseEnElMasHeridoAtacaAlMasDañado stamp: 'mg 3/25/2024 16:53:39'!
PASSED!

!testRun: #CombatientesTest #test05NoSeEnfocaSiEstaMuerto stamp: 'mg 3/25/2024 16:53:39'!
PASSED!

!testRun: #CombatientesTest #test_01_GoliatEmpiezaSano stamp: 'mg 3/25/2024 16:53:39'!
PASSED!

!testRun: #CombatientesTest #test_02_GoliatNoEstaSanoSiRecibeDaño stamp: 'mg 3/25/2024 16:53:39'!
PASSED!

!testRun: #CombatientesTest #test_03_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/25/2024 16:53:39'!
PASSED!

!testRun: #CombatientesTest #test_04_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/25/2024 16:53:39'!
PASSED!

!testRun: #CombatientesTest #test_05_GoliatPuedeRecibirDañoMultiplesVeces stamp: 'mg 3/25/2024 16:53:39'!
PASSED!

!testRun: #CombatientesTest #test_06_DavidPuedeAtacarAAlguien stamp: 'mg 3/25/2024 16:53:39'!
PASSED!

!testRun: #CombatientesTest #test_07_DavidPuedeAtacarEnemigosAsignados stamp: 'mg 3/25/2024 16:53:39'!
PASSED!

!testRun: #CombatientesTest #test_08_DavidNoAtacaAUnEnemigoNoAsignado stamp: 'mg 3/25/2024 16:53:39'!
PASSED!

!testRun: #CombatientesTest #test_09_MuereCuandoRecibe20DeDaño stamp: 'mg 3/25/2024 16:53:39'!
PASSED!

!testRun: #CombatientesTest #test_10_NoAtacaSiEstaMuerto stamp: 'mg 3/25/2024 16:53:39'!
PASSED!

!testRun: #CombatientesTest #test_11_ObtenerVida stamp: 'mg 3/25/2024 16:53:39'!
PASSED!

----STARTUP---- (26 March 2024 20:57:34) as C:\GITHUB\is1-leveroni\cuis\windows64\CuisUniversity-6169.image!


----End fileIn of C:\GITHUB\is1-leveroni\ejs\combatientes\Combatientes.st----!

TestCase subclass: #OgroTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Combatientes'!

!classDefinition: #OgroTest category: #Combatientes stamp: 'mg 3/26/2024 21:00:42'!
TestCase subclass: #OgroTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Combatientes'!

!classDefinition: #Ogro category: #Combatientes stamp: 'mg 3/26/2024 21:01:08'!
Combatiente subclass: #Ogro
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Combatientes'!

!classDefinition: #Humano category: #Combatientes stamp: 'mg 3/26/2024 21:01:16'!
Combatiente subclass: #Humano
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Combatientes'!
!OgroTest methodsFor: 'nil' stamp: 'mg 3/26/2024 21:00:49'!
test01_hace8DeDaño
	| humano ogro |
	ogro := Ogro new.
	humano := Humano new.
	
	ogro asignarEnemigos: {humano}.
	ogro atacar.
	
	self assert: humano dañoRecibido = 8
	
	! !
!Ogro methodsFor: 'nil' stamp: 'mg 3/26/2024 21:01:32' overrides: 50528055!
atacarA: unCombatiente
	unCombatiente recibirDaño: 8.! !

!testRun: #OgroTest #test01_hace8DeDaño stamp: 'mg 3/26/2024 21:01:38'!
PASSED!

!testRun: #OgroTest #test01_hace8DeDaño stamp: 'mg 3/26/2024 21:01:38'!
PASSED!
!OgroTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:02:06'!
test02_tiene40PuntosDeVida
	| ogro |
	ogro := Ogro new.
	
	self assert: ogro 
	
	! !
!OgroTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:02:37' prior: 50528160!
test02_tiene40PuntosDeVida
	| ogro |
	ogro := Ogro new.
	
	self assert: ogro vidaActual  = 40
	
	! !

!testRun: #OgroTest #test02_tiene40PuntosDeVida stamp: 'mg 3/26/2024 21:02:38'!
FAILURE!
!OgroTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:02:45' prior: 50528166!
test02_tiene40PuntosDeVida
	| ogro |
	ogro := Ogro new.
	
	self assert: ogro vidaActual = 40
	
	! !

!testRun: #OgroTest #test02_tiene40PuntosDeVida stamp: 'mg 3/26/2024 21:02:45'!
FAILURE!
!Combatiente methodsFor: 'public' stamp: 'mg 3/26/2024 21:03:19' prior: 50528112!
vidaActual
	^40 - self dañoRecibido! !
!Combatiente methodsFor: 'public' stamp: 'mg 3/26/2024 21:03:29' prior: 50528184!
vidaActual
	^20 - self dañoRecibido! !
!Ogro methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:03:48' overrides: 50528188!
vidaActual
	^40 - self dañoRecibido! !

!testRun: #OgroTest #test02_tiene40PuntosDeVida stamp: 'mg 3/26/2024 21:03:52'!
PASSED!

!testRun: #OgroTest #test01_hace8DeDaño stamp: 'mg 3/26/2024 21:03:52'!
PASSED!

!testRun: #OgroTest #test02_tiene40PuntosDeVida stamp: 'mg 3/26/2024 21:03:52'!
PASSED!

TestCase subclass: #MagoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Combatientes'!

!classDefinition: #MagoTest category: #Combatientes stamp: 'mg 3/26/2024 21:04:42'!
TestCase subclass: #MagoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Combatientes'!

!classDefinition: #Mago category: #Combatientes stamp: 'mg 3/26/2024 21:12:54'!
Combatiente subclass: #Mago
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Combatientes'!
!MagoTest methodsFor: 'nil' stamp: 'mg 3/26/2024 21:12:43'!
test_01_magoAtacaALos6MasSanos
	| enemigos humanos mago ogros |
	mago := Mago new.
	
	humanos := Array new: 6.
	6 timesRepeat: [humanos add: Humano new].
	
	ogros := {Ogro new}.
	
	enemigos := Array new: 7.
	humanos do: [:humano | enemigos add: humano].
	ogros do: [:ogro | enemigos add: ogro].
	
	mago asignarEnemigos: enemigos.
	
	ogros do: [:ogro | self assert: ogro estaSano]
	humanos do: [:humano | self deny: humano estaSano]! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:13:21'!
ERROR!
!MagoTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:14:26' prior: 50528222!
test_01_magoAtacaALos6MasSanos
	| enemigos humanos mago ogros |
	mago := Mago new.
	
	humanos := {Humano new. Humano new. Humano new. Humano new. Humano new. Humano new}.
	ogros := {Ogro new}.
	
	enemigos := Array new: 7.
	humanos do: [:humano | enemigos add: humano].
	ogros do: [:ogro | enemigos add: ogro].
	
	mago asignarEnemigos: enemigos.
	
	ogros do: [:ogro | self assert: ogro estaSano]
	humanos do: [:humano | self deny: humano estaSano]! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:14:27'!
ERROR!
!MagoTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:17:56' prior: 50528242!
test_01_magoAtacaALos6MasSanos
	| enemigos mago |
	mago := Mago new.
	
	enemigos := {Ogro new. Humano new. Humano new. Humano new. Humano new. Humano new. Humano new}.
	
	mago asignarEnemigos: enemigos.
	
	self assert: enemigos first estaSano.
	6 timesRepeat: [:i | self assert: (enemigos at:i+1  estaSano)]! !
!MagoTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:19:30' prior: 50528262!
test_01_magoAtacaALos6MasSanos
	| enemigos mago |
	mago := Mago new.
	
	enemigos := {Ogro new. Humano new. Humano new. Humano new. Humano new. Humano new. Humano new}.
	
	mago asignarEnemigos: enemigos.
	
	self assert: enemigos first estaSano.
	1 to: 7 do: [:i | 
        self assert: (enemigos at: i) estaSano].! !
!MagoTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:20:07' prior: 50528275!
test_01_magoAtacaALos6MasSanos
	| enemigos mago |
	mago := Mago new.
	
	enemigos := (Array new: 7) 
        		at: 1 put: Ogro new; 
	        atAll: (2 to: 7) put: Humano new; 
	        yourself.
	
	mago asignarEnemigos: enemigos.
	
	self assert: enemigos first estaSano.
	1 to: 7 do: [:i | 
        self assert: (enemigos at: i) estaSano].! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:20:10'!
PASSED!

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:20:10'!
PASSED!
!MagoTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:20:59' prior: 50528288!
test_01_magoAtacaALos6MasSanos
	| enemigos mago |
	mago := Mago new.
	
	enemigos := (Array new: 7) 
        		at: 1 put: Ogro new; 
	        atAll: (2 to: 7) put: Humano new; 
	        yourself.
	
	mago asignarEnemigos: enemigos.
	
	self assert: (enemigos at: 1) estaSano.
	
	2 to: 7 do: [:i | 
	        self assert: (enemigos at: i) estaSano].! !
!MagoTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:21:07' prior: 50528308!
test_01_magoAtacaALos6MasSanos
	| enemigos mago |
	mago := Mago new.
	
	enemigos := (Array new: 7) 
        		at: 1 put: Ogro new; 
	        atAll: (2 to: 7) put: Humano new; 
	        yourself.
	
	mago asignarEnemigos: enemigos.
	
	self assert: (enemigos at: 1) estaSano.
	
	2 to: 7 do: [:i | self assert: (enemigos at: i) estaSano].! !
!MagoTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:21:37' prior: 50528322!
test_01_magoAtacaALos6MasSanos
	| enemigos mago |
	mago := Mago new.
	
	enemigos := (Array new: 7) 
        		at: 1 put: Ogro new; 
	        atAll: (2 to: 7) put: Humano new; 
	        yourself.
	
	mago asignarEnemigos: enemigos.
	
	self assert: (enemigos at: 1) estaSano.
	2 to: 7 do: [:indice | self assert: (enemigos at: indice) estaSano].! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:21:38'!
PASSED!

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:21:38'!
PASSED!
!MagoTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:21:47' prior: 50528336!
test_01_magoAtacaALos6MasSanos
	| enemigos mago |
	mago := Mago new.
	
	enemigos := (Array new: 7) 
        		at: 1 put: Ogro new; 
	        atAll: (2 to: 7) put: Humano new; 
	        yourself.
	
	mago asignarEnemigos: enemigos.
	
	self assert: (enemigos at: 1) estaSano.
	2 to: 7 do: [:indice | self deny: (enemigos at: indice) estaSano].! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:21:48'!
FAILURE!
!MagoTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:21:58' prior: 50528356!
test_01_magoAtacaALos6MasSanos
	| enemigos mago |
	mago := Mago new.
	
	enemigos := (Array new: 7) 
        		at: 1 put: Ogro new; 
	        atAll: (2 to: 7) put: Humano new; 
	        yourself.
	
	mago asignarEnemigos: enemigos.
	
	mago atacar
	
	self assert: (enemigos at: 1) estaSano.
	2 to: 7 do: [:indice | self deny: (enemigos at: indice) estaSano].! !
!MagoTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:22:01' prior: 50528373!
test_01_magoAtacaALos6MasSanos
	| enemigos mago |
	mago := Mago new.
	
	enemigos := (Array new: 7) 
        		at: 1 put: Ogro new; 
	        atAll: (2 to: 7) put: Humano new; 
	        yourself.
	
	mago asignarEnemigos: enemigos.
	
	mago atacar.
	
	self assert: (enemigos at: 1) estaSano.
	2 to: 7 do: [:indice | self deny: (enemigos at: indice) estaSano].! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:22:01'!
FAILURE!
!Mago methodsFor: 'nil' stamp: 'mg 3/26/2024 21:22:48' overrides: 50528100!
initialize
	! !
!Mago methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:23:29' prior: 50528405 overrides: 50528100!
initialize
	enemigos := #().
	dañoRecibido := 0.
	self enfocarseEnElMasSano.! !

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerteCombatienteBando2 stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombateTest #test05_combatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombateTest #test06_combateTerminaCuandoTodosLosDeUnBandoMueren stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombateTest #test07_finalizaCuandoMuereAlgunBando stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombateTest #test08_obtenerRondas stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombateTest #test09_obtenerGanador stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombateTest #test10_promedioVidaGanador stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombatientesTest #test01PuedoDefinirleUnaEstrategiaADavid stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombatientesTest #test02EnfocarseEnElMasSanoAtacaAlMenosDañado stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombatientesTest #test03EnfocarseEnElMasSanoAtacaAlMenosDañadoNoImportaElOrden stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombatientesTest #test04EnfocarseEnElMasHeridoAtacaAlMasDañado stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombatientesTest #test05NoSeEnfocaSiEstaMuerto stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombatientesTest #test_01_GoliatEmpiezaSano stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombatientesTest #test_02_GoliatNoEstaSanoSiRecibeDaño stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombatientesTest #test_03_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombatientesTest #test_04_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/26/2024 21:23:29'!
PASSED!

!testRun: #CombatientesTest #test_05_GoliatPuedeRecibirDañoMultiplesVeces stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test_06_DavidPuedeAtacarAAlguien stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test_07_DavidPuedeAtacarEnemigosAsignados stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test_08_DavidNoAtacaAUnEnemigoNoAsignado stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test_09_MuereCuandoRecibe20DeDaño stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test_10_NoAtacaSiEstaMuerto stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test_11_ObtenerVida stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:23:30'!
FAILURE!

!testRun: #OgroTest #test01_hace8DeDaño stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #OgroTest #test02_tiene40PuntosDeVida stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:23:30'!
FAILURE!

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerteCombatienteBando2 stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombateTest #test05_combatienteBando1ViveSiMatoAlBando2 stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombateTest #test06_combateTerminaCuandoTodosLosDeUnBandoMueren stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombateTest #test07_finalizaCuandoMuereAlgunBando stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombateTest #test08_obtenerRondas stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombateTest #test09_obtenerGanador stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombateTest #test10_promedioVidaGanador stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test01PuedoDefinirleUnaEstrategiaADavid stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test02EnfocarseEnElMasSanoAtacaAlMenosDañado stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test03EnfocarseEnElMasSanoAtacaAlMenosDañadoNoImportaElOrden stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test04EnfocarseEnElMasHeridoAtacaAlMasDañado stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test05NoSeEnfocaSiEstaMuerto stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test_01_GoliatEmpiezaSano stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test_02_GoliatNoEstaSanoSiRecibeDaño stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test_03_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test_04_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test_05_GoliatPuedeRecibirDañoMultiplesVeces stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test_06_DavidPuedeAtacarAAlguien stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test_07_DavidPuedeAtacarEnemigosAsignados stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test_08_DavidNoAtacaAUnEnemigoNoAsignado stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test_09_MuereCuandoRecibe20DeDaño stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test_10_NoAtacaSiEstaMuerto stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #CombatientesTest #test_11_ObtenerVida stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:23:30'!
FAILURE!

!testRun: #OgroTest #test01_hace8DeDaño stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #OgroTest #test02_tiene40PuntosDeVida stamp: 'mg 3/26/2024 21:23:30'!
PASSED!

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:23:30'!
FAILURE!
!Mago methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:24:48' prior: 50528409 overrides: 50528100!
initialize
	enemigos := #().
	dañoRecibido := 0.
	self enfocarseEnLos6MasSanos.! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:26:01'!
ERROR!
!Mago methodsFor: '-- all --' stamp: 'mg 3/26/2024 21:26:16'!
enfocarseEnLos6MasSanos
	self shouldBeImplemented.! !
!Mago methodsFor: '-- all --' stamp: 'mg 3/26/2024 21:26:51' prior: 50528616!
enfocarseEnLos6MasSanos
	estrategia := [
		]! !
!MagoTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:27:07' prior: 50528388!
test_01_magoAtacaALos6MasSanos
	| enemigos mago |
	mago := Mago new.
	
	enemigos := (Array new: 7) 
        		at: 1 put: Humano new; 
	        atAll: (2 to: 7) put: Ogro new; 
	        yourself.
	
	mago asignarEnemigos: enemigos.
	
	mago atacar.
	
	self assert: (enemigos at: 1) estaSano.
	2 to: 7 do: [:indice | self deny: (enemigos at: indice) estaSano].! !
!MagoTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:28:28' prior: 50528626!
test_01_magoAtacaALos6MasSanos
	| enemigos mago |
	mago := Mago new.
	
	enemigos := (Array new: 7) 
        		at: 1 put: Humano new; 
	        atAll: (2 to: 7) put: Ogro new; 
	        yourself.
	
	mago asignarEnemigos: enemigos.
	
	mago atacar.
	
	self assert: (enemigos at: 1) estaSano.
	2 to: 7 do: [:indice | self deny: (enemigos at: indice) estaSano].! !
!Mago methodsFor: '-- all --' stamp: 'mg 3/26/2024 21:30:11' prior: 50528621!
enfocarseEnLos6MasSanos
	estrategia := [
		^(enemigos sort: [:combatiente1 :combatiente2 | combatiente1 vidaActual > combatiente2 vidaActual]) first: 6.
		]! !
!Mago methodsFor: '-- all --' stamp: 'mg 3/26/2024 21:30:50' prior: 50528655!
enfocarseEnLos6MasSanos
	estrategia := [
		^(enemigos sort: [:combatiente1 :combatiente2 | combatiente1 vidaActual > combatiente2 vidaActual]) first: 6.
		]! !
!Mago methodsFor: '-- all --' stamp: 'mg 3/26/2024 21:30:55' prior: 50528663!
enfocarseEnLos6MasSanos
	estrategia := [
		
		^(enemigos sort: [:combatiente1 :combatiente2 | combatiente1 vidaActual > combatiente2 vidaActual]) first: 6.
		
		]! !
!Mago methodsFor: '-- all --' stamp: 'mg 3/26/2024 21:30:59' prior: 50528671!
enfocarseEnLos6MasSanos
	estrategia := [
		^(enemigos sort: [:combatiente1 :combatiente2 | combatiente1 vidaActual > combatiente2 vidaActual]) first: 6.
		]! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:31:07'!
ERROR!
!Mago methodsFor: '-- all --' stamp: 'mg 3/26/2024 21:31:56' prior: 50528679!
enfocarseEnLos6MasSanos
	estrategia := [:enemigos2 |
		^(enemigos2 sort: [:combatiente1 :combatiente2 | combatiente1 vidaActual > combatiente2 vidaActual]) first: 6.
		]! !
!Mago methodsFor: '-- all --' stamp: 'mg 3/26/2024 21:32:27' prior: 50528690!
enfocarseEnLos6MasSanos
	estrategia := [:candidatos | 		^(candidatos sort: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual]) first: 6.		]! !
!Mago methodsFor: '-- all --' stamp: 'mg 3/26/2024 21:32:47' prior: 50528698!
enfocarseEnLos6MasSanos
	estrategia := [:candidatos | 		(candidatos sort: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual]) first: 6.		]! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:33:25'!
ERROR!
!Mago methodsFor: 'nil' stamp: 'mg 3/26/2024 21:35:03' overrides: 50528046!
atacar
	| victimaElegida |
	self estaMuerto ifTrue: [^self].
	
	victimaElegida := self elegirVictima.
	(victimaElegida == nil) ifTrue: [^self].

	self atacarA: victimaElegida.
! !
!Mago methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:35:55' prior: 50528717 overrides: 50528046!
atacar
	| victimasElegidas |
	self estaMuerto ifTrue: [^self].
	
	victimasElegidas := self elegirVictima.
	(victimasElegidas == nil) ifTrue: [^self].

	victimasElegidas do: [:victimaElegida | self atacarA: victimaElegida]
! !
!Mago methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:37:20' prior: 50528726 overrides: 50528046!
atacar
	| victimasElegidas |
	self estaMuerto ifTrue: [^self].
	
	victimasElegidas := self elegirVictima.
	(victimasElegidas isEmpty) ifTrue: [^self].

	victimasElegidas do: [:victimaElegida | self atacarA: victimaElegida]
! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:38:07'!
FAILURE!
!MagoTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:39:16' prior: 50528641!
test_01_magoAtacaALos6MasSanos
	| enemigos mago |
	mago := Mago new.
	
	enemigos := (Array new: 7) 
        		at: 1 put: Humano new; 
	        atAll: (2 to: 7) put: Ogro new; 
	        yourself.
	
	mago asignarEnemigos: enemigos.
	
	mago atacar.
	
	self assert: (enemigos at: 0) estaSano.
	1 to: 6 do: [:indice | self deny: (enemigos at: indice) estaSano].! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:39:17'!
ERROR!
!MagoTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:42:10' prior: 50528750!
test_01_magoAtacaALos6MasSanos
	| enemigos mago |
	mago := Mago new.
	
	enemigos := Array new: 7.
	
	enemigos at: 1 put: Ogro new.
	
	2 to: 7 do: [:i | enemigos at: i put: Humano new].

	
	mago asignarEnemigos: enemigos.
	
	mago atacar.
	
	self assert: (enemigos at: 1) estaSano.
	2 to: 7 do: [:indice | self deny: (enemigos at: indice) estaSano].! !
!MagoTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:42:12' prior: 50528767!
test_01_magoAtacaALos6MasSanos
	| enemigos mago |
	mago := Mago new.
	
	enemigos := Array new: 7.
	
	enemigos at: 1 put: Ogro new.
	2 to: 7 do: [:i | enemigos at: i put: Humano new].

	
	mago asignarEnemigos: enemigos.
	
	mago atacar.
	
	self assert: (enemigos at: 1) estaSano.
	2 to: 7 do: [:indice | self deny: (enemigos at: indice) estaSano].! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:42:13'!
FAILURE!

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:42:36'!
FAILURE!
!MagoTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:50:51' prior: 50528781!
test_01_magoAtacaALos6MasSanos
	| enemigos mago |
	mago := Mago new.
	
	enemigos := Array new: 7.
	
	enemigos at: 1 put: Humano new.
	2 to: 7 do: [:i | enemigos at: i put: Ogro new].

	
	mago asignarEnemigos: enemigos.
	
	mago atacar.
	
	self assert: (enemigos at: 1) estaSano.
	2 to: 7 do: [:indice | self deny: (enemigos at: indice) estaSano].! !
!MagoTest methodsFor: 'as yet unclassified' stamp: 'mg 3/26/2024 21:50:54' prior: 50528801!
test_01_magoAtacaALos6MasSanos
	| enemigos mago |
	mago := Mago new.
	
	enemigos := Array new: 7.
	
	enemigos at: 1 put: Humano new.
	2 to: 7 do: [:i | enemigos at: i put: Ogro new].

	mago asignarEnemigos: enemigos.
	
	mago atacar.
	
	self assert: (enemigos at: 1) estaSano.
	2 to: 7 do: [:indice | self deny: (enemigos at: indice) estaSano].! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 3/26/2024 21:50:55'!
FAILURE!

----STARTUP---- (4 April 2024 14:46:23) as C:\GITHUB\is1-leveroni\cuis\windows64\CuisUniversity-6169.image!


----End fileIn of C:\Users\mgismondi\Downloads\Combatientes_refactor2.st----!

----STARTUP---- (5 April 2024 08:45:54) as C:\GITHUB\is1-leveroni\cuis\windows64\CuisUniversity-6169.image!


----End fileIn of C:\Users\mgismondi\Downloads\Combatiente_refactor3.st----!

Object subclass: #Combatiente
	instanceVariableNames: 'enemigos estrategia dañoRecibido vidaActual dañoAProvocar'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Combatientes'!

!classDefinition: #Combatiente category: #Combatientes stamp: 'mg 4/5/2024 08:47:31'!
Object subclass: #Combatiente
	instanceVariableNames: 'enemigos estrategia dañoRecibido vidaActual dañoAProvocar'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Combatientes'!
!Combatiente methodsFor: 'accessing' stamp: 'mg 4/5/2024 08:47:56' prior: 50530212!
recibirDaño: unaCantidadDeDaño
	dañoRecibido := dañoRecibido + unaCantidadDeDaño.
	vidaActual := vidaActual - unaCantidadDeDaño.! !
!Combatiente methodsFor: 'private' stamp: 'mg 4/5/2024 08:48:12' prior: 50530219!
vidaActual
	^vidaActual. ! !
!Combatiente methodsFor: 'comparing' stamp: 'mg 4/5/2024 08:48:32' prior: 50530199!
estaMuerto
	^vidaActual = 0. ! !
!Combatiente methodsFor: 'comparing' stamp: 'mg 4/5/2024 08:48:41' prior: 50530203!
estaSano
	^dañoRecibido = 0.! !
!Ogro methodsFor: 'initialization' stamp: 'mg 4/5/2024 08:48:58' prior: 50530445 overrides: 50530208!
initialize
	enemigos := #().
	dañoRecibido := 0. 
	vidaActual := 40.
	dañoAProvocar := 8.
	self enfocarseEnElMasSano.! !
!Mago methodsFor: 'initialization' stamp: 'mg 4/5/2024 08:49:02' prior: 50530372 overrides: 50530208!
initialize
	enemigos := #().
	dañoRecibido := 0. 
	vidaActual := 20.	
	dañoAProvocar := 2.
	self enfocarseEnLos6MasSanos.! !
!Humano methodsFor: 'initialization' stamp: 'mg 4/5/2024 08:49:05' prior: 50530311 overrides: 50530208!
initialize
	enemigos := #().
	dañoRecibido := 0.
	vidaActual := 20.
	dañoAProvocar := 4.
	self enfocarseEnElMasSano.! !
!Hostigador methodsFor: 'initialization' stamp: 'mg 4/5/2024 08:49:12' prior: 50530293 overrides: 50530208!
initialize
	enemigos := #().
	dañoRecibido := 0.
	vidaActual := 20.
	dañoAProvocar := 4.
	self enfocarseEnElMasSano. 

! !
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 08:50:32' prior: 50530243!
alternarEnfoque

	(estrategiaActual  =  #atacarAlMasSano ) 
		ifTrue: [self enfocarseEnElMasHerido.] 
		ifFalse:  [self enfocarseEnElMasSano.].
	! !
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 08:50:33' prior: 50530520!
alternarEnfoque

	(estrategiaActual  =  #atacarAlMasSano ) 
		ifTrue: [self enfocarseEnElMasHerido.]
		ifFalse:  [self enfocarseEnElMasSano.].
	! !
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 08:50:35' prior: 50530528!
alternarEnfoque

	(estrategiaActual  =  #atacarAlMasSano )
		ifTrue: [self enfocarseEnElMasHerido.]
		ifFalse:  [self enfocarseEnElMasSano.].
	! !
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 08:50:37' prior: 50530536!
alternarEnfoque

	(estrategiaActual  =  #atacarAlMasSano)
		ifTrue: [self enfocarseEnElMasHerido.]
		ifFalse:  [self enfocarseEnElMasSano.].
	! !
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 08:52:38' prior: 50530250!
enfocarseEnElMasHerido
	estrategiaActual := #atacarAlMasHerido.
	
	estrategia := [:candidatos | |candidatosFiltrados|
			 		candidatosFiltrados := candidatos select: [:candidato | candidato estaMuerto not ].
					candidatosFiltrados isEmpty ifTrue:[ candidatosFiltrados ].
					
					(candidatosFiltrados 
						sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual < candidatos2 vidaActual])
						first: 1.] 
					
! !

!testRun: #HostigadorTest #test01_HostigadorAtacaAlMasSano stamp: 'mg 4/5/2024 08:52:39'!
PASSED!

!testRun: #HostigadorTest #test02_HostigadorAtacaAlMasSanoAlternaEstrategiaYAtacaAlMasHerido stamp: 'mg 4/5/2024 08:52:39'!
PASSED!
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 08:52:46' prior: 50530552!
enfocarseEnElMasHerido
	estrategiaActual := #atacarAlMasHerido.
	
	estrategia := [:candidatos | |candidatosFiltrados|
			 		candidatosFiltrados := candidatos select: [:candidato | candidato estaMuerto not ].					
					(candidatosFiltrados 
						sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual < candidatos2 vidaActual])
						first: 1.] 
					
! !

!testRun: #HostigadorTest #test01_HostigadorAtacaAlMasSano stamp: 'mg 4/5/2024 08:52:46'!
PASSED!

!testRun: #HostigadorTest #test02_HostigadorAtacaAlMasSanoAlternaEstrategiaYAtacaAlMasHerido stamp: 'mg 4/5/2024 08:52:46'!
PASSED!
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 08:52:56' prior: 50530576!
enfocarseEnElMasHerido
	estrategiaActual := #atacarAlMasHerido.
	
	estrategia := [:candidatos | |candidatosFiltrados|
			 		candidatosFiltrados := candidatos select: [:candidato | candidato estaMuerto not ].					
					(candidatosFiltrados sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual < candidatos2 vidaActual])
						first: 1.] 
					
! !
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 08:53:11' prior: 50530598!
enfocarseEnElMasHerido
	estrategiaActual := #atacarAlMasHerido.
	
	estrategia := [:candidatos | |candidatosFiltrados|
			 		candidatosFiltrados := candidatos select: [:candidato | candidato estaMuerto not ].					
					
					(candidatosFiltrados 
						sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual < candidatos2 vidaActual])
						first: 1.] 
					
! !
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 08:53:19' prior: 50530612!
enfocarseEnElMasHerido
	estrategiaActual := #atacarAlMasHerido.
	
	estrategia := [:candidatos | |candidatosFiltrados|
		
			 		candidatosFiltrados := candidatos select: [:candidato | candidato estaMuerto not ].					
					
					(candidatosFiltrados 
						sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual < candidatos2 vidaActual])
						first: 1.] 
					
! !
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 08:53:33' prior: 50530627!
enfocarseEnElMasHerido
	estrategiaActual := #atacarAlMasHerido.
	
	estrategia := 			[:candidatos | |candidatosFiltrados|
		
			 		candidatosFiltrados := candidatos select: [:candidato | candidato estaMuerto not ].					
					
					(candidatosFiltrados 
						sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual < candidatos2 vidaActual])
						first: 1.
				]
					
! !
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 08:53:50' prior: 50530642!
enfocarseEnElMasHerido
	estrategiaActual := #atacarAlMasHerido.
	
	estrategia := [:candidatos | |candidatosFiltrados|
		
			 		candidatosFiltrados := candidatos select: [:candidato | candidato estaMuerto not ].					
					
					(candidatosFiltrados 
						sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual < candidatos2 vidaActual])
						first: 1.
				]
					
! !
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 08:54:22' prior: 50530269!
enfocarseEnElMasSano
	estrategiaActual := #atacarAlMasSano.
	
	estrategia := [:candidatos | |candidatosFiltrados|
		
			 		candidatosFiltrados := candidatos select: [:candidato | candidato estaMuerto not ].					
					
					(candidatosFiltrados 
						sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual])
						first: 1.
				]
! !

!testRun: #HostigadorTest #test01_HostigadorAtacaAlMasSano stamp: 'mg 4/5/2024 08:54:28'!
PASSED!

!testRun: #HostigadorTest #test02_HostigadorAtacaAlMasSanoAlternaEstrategiaYAtacaAlMasHerido stamp: 'mg 4/5/2024 08:54:28'!
PASSED!
!Humano methodsFor: 'strategy' stamp: 'mg 4/5/2024 08:55:03' prior: 50530317!
enfocarseEnElMasHerido
	"estrategia := [:candidatos | (candidatos select: [:candidato | candidato estaMuerto not ]) 	detectMin: [:combatiente | combatiente vidaActual ]]."
	
		estrategia := [:candidatos | |candidatosFiltrados|
		
			 		candidatosFiltrados := candidatos select: [:candidato | candidato estaMuerto not ].					
					
					(candidatosFiltrados 
						sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual < candidatos2 vidaActual])
						first: 1.
				]
! !
!Humano methodsFor: 'strategy' stamp: 'mg 4/5/2024 08:55:12' prior: 50530339!
enfocarseEnElMasSano
	"estrategia := [:candidatos | (candidatos select: [:candidato | candidato estaMuerto not ]) 	detectMax: [:combatiente | combatiente vidaActual]]."
		estrategia := [:candidatos | |candidatosFiltrados|
		
			 		candidatosFiltrados := candidatos select: [:candidato | candidato estaMuerto not ].					
					
					(candidatosFiltrados 
						sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual])
						first: 1.
				]
				
				! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 4/5/2024 08:56:00'!
PASSED!

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 4/5/2024 08:56:00'!
PASSED!

!testRun: #MagoTest #test_02_magoAtacaALos6MasSanosPor2DeVida stamp: 'mg 4/5/2024 08:56:00'!
PASSED!

!testRun: #MagoTest #test_03_magoAtacaALos5Sobrevivientes stamp: 'mg 4/5/2024 08:56:00'!
PASSED!

!testRun: #MagoTest #test_04_magoNoAtacaPorqueEstanTodosSusEnemigosMuertos stamp: 'mg 4/5/2024 08:56:00'!
PASSED!
!Mago methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:00:30' prior: 50530378!
enfocarseEnLos6MasSanos
	estrategia := [:candidatos | 
		
		((candidatos select: [:candidato | candidato estaMuerto not ]) sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual])first: 6].
		! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 4/5/2024 09:00:31'!
PASSED!

!testRun: #MagoTest #test_02_magoAtacaALos6MasSanosPor2DeVida stamp: 'mg 4/5/2024 09:00:31'!
PASSED!

!testRun: #MagoTest #test_03_magoAtacaALos5Sobrevivientes stamp: 'mg 4/5/2024 09:00:31'!
ERROR!

!testRun: #MagoTest #test_04_magoNoAtacaPorqueEstanTodosSusEnemigosMuertos stamp: 'mg 4/5/2024 09:00:31'!
ERROR!
!Mago methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:01:01' prior: 50530745!
enfocarseEnLos6MasSanos
	estrategia := [:candidatos | 
					((candidatos select: [:candidato | candidato estaMuerto not ]) 
					sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual])
					first: 6
		].
		! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 4/5/2024 09:01:08'!
PASSED!

!testRun: #MagoTest #test_02_magoAtacaALos6MasSanosPor2DeVida stamp: 'mg 4/5/2024 09:01:08'!
PASSED!

!testRun: #MagoTest #test_03_magoAtacaALos5Sobrevivientes stamp: 'mg 4/5/2024 09:01:08'!
ERROR!

!testRun: #MagoTest #test_04_magoNoAtacaPorqueEstanTodosSusEnemigosMuertos stamp: 'mg 4/5/2024 09:01:08'!
ERROR!

!testRun: #MagoTest #test_03_magoAtacaALos5Sobrevivientes stamp: 'mg 4/5/2024 09:01:10'!
ERROR!
!Mago methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:06:39' prior: 50530768!
enfocarseEnLos6MasSanos
	estrategia := [:candidatos |  	
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual].
		
		candidatosVivos size < 6 ifTrue: [^candidatosOrdenados].
		candidatosOrdenados 		first: 6.
		
		].
		! !
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:08:14' prior: 50530672!
enfocarseEnElMasSano
	estrategiaActual := #atacarAlMasSano.
	
	estrategia := [:candidatos | 
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual].
		
		candidatosVivos isEmpty ifTrue: [^candidatosOrdenados].
		candidatosOrdenados 		first: 1.
		
	].
! !
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:08:27' prior: 50530657!
enfocarseEnElMasHerido
	estrategiaActual := #atacarAlMasHerido.
	
	estrategia := [:candidatos | 
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual < candidatos2 vidaActual].
		
		candidatosVivos isEmpty ifTrue: [^candidatosOrdenados].
		candidatosOrdenados 		first: 1.
		
	].
					
! !

!testRun: #HostigadorTest #test01_HostigadorAtacaAlMasSano stamp: 'mg 4/5/2024 09:08:32'!
PASSED!

!testRun: #HostigadorTest #test02_HostigadorAtacaAlMasSanoAlternaEstrategiaYAtacaAlMasHerido stamp: 'mg 4/5/2024 09:08:32'!
PASSED!

!testRun: #MagoTest #test_02_magoAtacaALos6MasSanosPor2DeVida stamp: 'mg 4/5/2024 09:08:36'!
PASSED!

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 4/5/2024 09:08:36'!
PASSED!

!testRun: #MagoTest #test_02_magoAtacaALos6MasSanosPor2DeVida stamp: 'mg 4/5/2024 09:08:36'!
PASSED!

!testRun: #MagoTest #test_03_magoAtacaALos5Sobrevivientes stamp: 'mg 4/5/2024 09:08:36'!
ERROR!

!testRun: #MagoTest #test_04_magoNoAtacaPorqueEstanTodosSusEnemigosMuertos stamp: 'mg 4/5/2024 09:08:36'!
ERROR!

!testRun: #MagoTest #test_03_magoAtacaALos5Sobrevivientes stamp: 'mg 4/5/2024 09:08:43'!
ERROR!

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 4/5/2024 09:09:07'!
PASSED!

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 4/5/2024 09:09:07'!
PASSED!

!testRun: #MagoTest #test_02_magoAtacaALos6MasSanosPor2DeVida stamp: 'mg 4/5/2024 09:09:07'!
PASSED!

!testRun: #MagoTest #test_03_magoAtacaALos5Sobrevivientes stamp: 'mg 4/5/2024 09:09:07'!
ERROR!

!testRun: #MagoTest #test_04_magoNoAtacaPorqueEstanTodosSusEnemigosMuertos stamp: 'mg 4/5/2024 09:09:07'!
ERROR!

!testRun: #MagoTest #test_03_magoAtacaALos5Sobrevivientes stamp: 'mg 4/5/2024 09:09:10'!
ERROR!

!testRun: #MagoTest #test_03_magoAtacaALos5Sobrevivientes stamp: 'mg 4/5/2024 09:10:11'!
ERROR!

!testRun: #MagoTest #test_03_magoAtacaALos5Sobrevivientes stamp: 'mg 4/5/2024 09:10:30'!
ERROR!
!Mago methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:34:09' prior: 50530794!
enfocarseEnLos6MasSanos
	estrategia := [:candidatos |  	
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual].
		
		candidatosVivos size < 6 ifTrue: [candidatosOrdenados] ifFalse: [candidatosOrdenados first: 6]		
		].
		! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 4/5/2024 09:34:10'!
PASSED!

!testRun: #MagoTest #test_02_magoAtacaALos6MasSanosPor2DeVida stamp: 'mg 4/5/2024 09:34:10'!
PASSED!

!testRun: #MagoTest #test_03_magoAtacaALos5Sobrevivientes stamp: 'mg 4/5/2024 09:34:10'!
PASSED!

!testRun: #MagoTest #test_04_magoNoAtacaPorqueEstanTodosSusEnemigosMuertos stamp: 'mg 4/5/2024 09:34:10'!
PASSED!
!Mago methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:34:20' prior: 50530895!
enfocarseEnLos6MasSanos
	estrategia := [:candidatos |  	
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual].
		
		candidatosVivos size < 6 
			ifTrue: [candidatosOrdenados] 
			ifFalse: [candidatosOrdenados first: 6]		
		].
		! !

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 4/5/2024 09:34:21'!
PASSED!

!testRun: #MagoTest #test_02_magoAtacaALos6MasSanosPor2DeVida stamp: 'mg 4/5/2024 09:34:21'!
PASSED!

!testRun: #MagoTest #test_03_magoAtacaALos5Sobrevivientes stamp: 'mg 4/5/2024 09:34:21'!
PASSED!

!testRun: #MagoTest #test_04_magoNoAtacaPorqueEstanTodosSusEnemigosMuertos stamp: 'mg 4/5/2024 09:34:21'!
PASSED!

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 4/5/2024 09:34:35'!
PASSED!

!testRun: #MagoTest #test_02_magoAtacaALos6MasSanosPor2DeVida stamp: 'mg 4/5/2024 09:34:35'!
PASSED!

!testRun: #MagoTest #test_03_magoAtacaALos5Sobrevivientes stamp: 'mg 4/5/2024 09:34:35'!
PASSED!

!testRun: #MagoTest #test_04_magoNoAtacaPorqueEstanTodosSusEnemigosMuertos stamp: 'mg 4/5/2024 09:34:35'!
PASSED!
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:34:54' prior: 50530827!
enfocarseEnElMasHerido
	estrategiaActual := #atacarAlMasHerido.
	
	estrategia := [:candidatos |  	
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual].
		
		candidatosVivos size < 6 
			ifTrue: [candidatosOrdenados] 
			ifFalse: [candidatosOrdenados first: 1]		
	].
					
! !
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:34:58' prior: 50530966!
enfocarseEnElMasHerido
	estrategiaActual := #atacarAlMasHerido.
	
	estrategia := [:candidatos |  	
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual].
		
		candidatosVivos size < 1
			ifTrue: [candidatosOrdenados] 
			ifFalse: [candidatosOrdenados first: 1]		
	].
					
! !

!testRun: #HostigadorTest #test01_HostigadorAtacaAlMasSano stamp: 'mg 4/5/2024 09:35:07'!
PASSED!

!testRun: #HostigadorTest #test02_HostigadorAtacaAlMasSanoAlternaEstrategiaYAtacaAlMasHerido stamp: 'mg 4/5/2024 09:35:07'!
FAILURE!

!testRun: #HostigadorTest #test02_HostigadorAtacaAlMasSanoAlternaEstrategiaYAtacaAlMasHerido stamp: 'mg 4/5/2024 09:35:07'!
FAILURE!
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:35:20' prior: 50530984!
enfocarseEnElMasHerido
	estrategiaActual := #atacarAlMasHerido.
	
	estrategia := [:candidatos |  	
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual < candidatos2 vidaActual].
		
		candidatosVivos size < 1
			ifTrue: [candidatosOrdenados] 
			ifFalse: [candidatosOrdenados first: 1]		
	].
					
! !
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:35:36' prior: 50530810!
enfocarseEnElMasSano
	estrategiaActual := #atacarAlMasSano.
	
	estrategia := [:candidatos |  	
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual].
		
		candidatosVivos isEmpty
			ifTrue: [candidatosOrdenados] 
			ifFalse: [candidatosOrdenados first: 1]		
	].
! !
!Hostigador methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:35:45' prior: 50531013!
enfocarseEnElMasHerido
	estrategiaActual := #atacarAlMasHerido.
	
	estrategia := [:candidatos |  	
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual < candidatos2 vidaActual].
		
		candidatosVivos isEmpty
			ifTrue: [candidatosOrdenados] 
			ifFalse: [candidatosOrdenados first: 1]		
	].
					
! !

!testRun: #HostigadorTest #test01_HostigadorAtacaAlMasSano stamp: 'mg 4/5/2024 09:35:48'!
PASSED!

!testRun: #HostigadorTest #test02_HostigadorAtacaAlMasSanoAlternaEstrategiaYAtacaAlMasHerido stamp: 'mg 4/5/2024 09:35:48'!
PASSED!
!Mago methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:35:54' prior: 50530924!
enfocarseEnLos6MasSanos
	estrategia := [:candidatos |  	
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual].
		
		candidatosVivos size < 6 
			ifTrue: [candidatosOrdenados] 
			ifFalse: [candidatosOrdenados first: 6]		
	].
		! !
!Humano methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:36:08' prior: 50530694!
enfocarseEnElMasHerido
	"estrategia := [:candidatos | (candidatos select: [:candidato | candidato estaMuerto not ]) 	detectMin: [:combatiente | combatiente vidaActual ]]."
	
		estrategia := [:candidatos |  	
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual < candidatos2 vidaActual].
		
		candidatosVivos isEmpty
			ifTrue: [candidatosOrdenados] 
			ifFalse: [candidatosOrdenados first: 1]		
	].
! !
!Humano methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:36:14' prior: 50531090!
enfocarseEnElMasHerido
	"estrategia := [:candidatos | (candidatos select: [:candidato | candidato estaMuerto not ]) 	detectMin: [:combatiente | combatiente vidaActual ]]."
	
	estrategia := [:candidatos |  	
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual < candidatos2 vidaActual].
		
		candidatosVivos isEmpty
			ifTrue: [candidatosOrdenados] 
			ifFalse: [candidatosOrdenados first: 1]		
	].
! !

!testRun: #HumanoTest #test01PuedoDefinirleUnaEstrategiaADavid stamp: 'mg 4/5/2024 09:36:16'!
PASSED!

!testRun: #HumanoTest #test02EnfocarseEnElMasSanoAtacaAlMenosDañado stamp: 'mg 4/5/2024 09:36:16'!
PASSED!

!testRun: #HumanoTest #test03EnfocarseEnElMasSanoAtacaAlMenosDañadoNoImportaElOrden stamp: 'mg 4/5/2024 09:36:16'!
PASSED!

!testRun: #HumanoTest #test04EnfocarseEnElMasHeridoAtacaAlMasDañado stamp: 'mg 4/5/2024 09:36:16'!
PASSED!

!testRun: #HumanoTest #test05NoSeEnfocaSiEstaMuerto stamp: 'mg 4/5/2024 09:36:16'!
ERROR!

!testRun: #HumanoTest #test_01_GoliatEmpiezaSano stamp: 'mg 4/5/2024 09:36:16'!
PASSED!

!testRun: #HumanoTest #test_02_GoliatNoEstaSanoSiRecibeDaño stamp: 'mg 4/5/2024 09:36:16'!
PASSED!

!testRun: #HumanoTest #test_03_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 4/5/2024 09:36:16'!
PASSED!

!testRun: #HumanoTest #test_04_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 4/5/2024 09:36:16'!
PASSED!

!testRun: #HumanoTest #test_05_GoliatPuedeRecibirDañoMultiplesVeces stamp: 'mg 4/5/2024 09:36:16'!
PASSED!

!testRun: #HumanoTest #test_06_DavidPuedeAtacarAAlguien stamp: 'mg 4/5/2024 09:36:16'!
PASSED!

!testRun: #HumanoTest #test_07_DavidPuedeAtacarEnemigosAsignados stamp: 'mg 4/5/2024 09:36:16'!
PASSED!

!testRun: #HumanoTest #test_08_DavidNoAtacaAUnEnemigoNoAsignado stamp: 'mg 4/5/2024 09:36:16'!
ERROR!

!testRun: #HumanoTest #test_09_MuereCuandoRecibe20DeDaño stamp: 'mg 4/5/2024 09:36:16'!
PASSED!

!testRun: #HumanoTest #test_10_NoAtacaSiEstaMuerto stamp: 'mg 4/5/2024 09:36:16'!
PASSED!
!Humano methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:36:38' prior: 50530712!
enfocarseEnElMasSano
	"estrategia := [:candidatos | (candidatos select: [:candidato | candidato estaMuerto not ]) 	detectMax: [:combatiente | combatiente vidaActual]]."
		estrategia := [:candidatos |  	
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual].
		
		candidatosVivos isEmpty
			ifTrue: [candidatosOrdenados] 
			ifFalse: [candidatosOrdenados first: 1]		
	].
				
				! !

!testRun: #HumanoTest #test01PuedoDefinirleUnaEstrategiaADavid stamp: 'mg 4/5/2024 09:36:39'!
PASSED!

!testRun: #HumanoTest #test02EnfocarseEnElMasSanoAtacaAlMenosDañado stamp: 'mg 4/5/2024 09:36:39'!
PASSED!

!testRun: #HumanoTest #test03EnfocarseEnElMasSanoAtacaAlMenosDañadoNoImportaElOrden stamp: 'mg 4/5/2024 09:36:39'!
PASSED!

!testRun: #HumanoTest #test04EnfocarseEnElMasHeridoAtacaAlMasDañado stamp: 'mg 4/5/2024 09:36:39'!
PASSED!

!testRun: #HumanoTest #test05NoSeEnfocaSiEstaMuerto stamp: 'mg 4/5/2024 09:36:39'!
PASSED!

!testRun: #HumanoTest #test_01_GoliatEmpiezaSano stamp: 'mg 4/5/2024 09:36:39'!
PASSED!

!testRun: #HumanoTest #test_02_GoliatNoEstaSanoSiRecibeDaño stamp: 'mg 4/5/2024 09:36:39'!
PASSED!

!testRun: #HumanoTest #test_03_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 4/5/2024 09:36:39'!
PASSED!

!testRun: #HumanoTest #test_04_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 4/5/2024 09:36:39'!
PASSED!

!testRun: #HumanoTest #test_05_GoliatPuedeRecibirDañoMultiplesVeces stamp: 'mg 4/5/2024 09:36:39'!
PASSED!

!testRun: #HumanoTest #test_06_DavidPuedeAtacarAAlguien stamp: 'mg 4/5/2024 09:36:39'!
PASSED!

!testRun: #HumanoTest #test_07_DavidPuedeAtacarEnemigosAsignados stamp: 'mg 4/5/2024 09:36:39'!
PASSED!

!testRun: #HumanoTest #test_08_DavidNoAtacaAUnEnemigoNoAsignado stamp: 'mg 4/5/2024 09:36:39'!
PASSED!

!testRun: #HumanoTest #test_09_MuereCuandoRecibe20DeDaño stamp: 'mg 4/5/2024 09:36:39'!
PASSED!

!testRun: #HumanoTest #test_10_NoAtacaSiEstaMuerto stamp: 'mg 4/5/2024 09:36:39'!
PASSED!
!Humano methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:36:43' prior: 50531181!
enfocarseEnElMasSano
	"estrategia := [:candidatos | (candidatos select: [:candidato | candidato estaMuerto not ]) 	detectMax: [:combatiente | combatiente vidaActual]]."
	estrategia := [:candidatos |  	
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual].
		
		candidatosVivos isEmpty
			ifTrue: [candidatosOrdenados] 
			ifFalse: [candidatosOrdenados first: 1]		
	].
				
				! !

!testRun: #HumanoTest #test01PuedoDefinirleUnaEstrategiaADavid stamp: 'mg 4/5/2024 09:36:44'!
PASSED!

!testRun: #HumanoTest #test02EnfocarseEnElMasSanoAtacaAlMenosDañado stamp: 'mg 4/5/2024 09:36:44'!
PASSED!

!testRun: #HumanoTest #test03EnfocarseEnElMasSanoAtacaAlMenosDañadoNoImportaElOrden stamp: 'mg 4/5/2024 09:36:44'!
PASSED!

!testRun: #HumanoTest #test04EnfocarseEnElMasHeridoAtacaAlMasDañado stamp: 'mg 4/5/2024 09:36:44'!
PASSED!

!testRun: #HumanoTest #test05NoSeEnfocaSiEstaMuerto stamp: 'mg 4/5/2024 09:36:44'!
PASSED!

!testRun: #HumanoTest #test_01_GoliatEmpiezaSano stamp: 'mg 4/5/2024 09:36:44'!
PASSED!

!testRun: #HumanoTest #test_02_GoliatNoEstaSanoSiRecibeDaño stamp: 'mg 4/5/2024 09:36:44'!
PASSED!

!testRun: #HumanoTest #test_03_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 4/5/2024 09:36:44'!
PASSED!

!testRun: #HumanoTest #test_04_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 4/5/2024 09:36:44'!
PASSED!

!testRun: #HumanoTest #test_05_GoliatPuedeRecibirDañoMultiplesVeces stamp: 'mg 4/5/2024 09:36:44'!
PASSED!

!testRun: #HumanoTest #test_06_DavidPuedeAtacarAAlguien stamp: 'mg 4/5/2024 09:36:44'!
PASSED!

!testRun: #HumanoTest #test_07_DavidPuedeAtacarEnemigosAsignados stamp: 'mg 4/5/2024 09:36:44'!
PASSED!

!testRun: #HumanoTest #test_08_DavidNoAtacaAUnEnemigoNoAsignado stamp: 'mg 4/5/2024 09:36:44'!
PASSED!

!testRun: #HumanoTest #test_09_MuereCuandoRecibe20DeDaño stamp: 'mg 4/5/2024 09:36:44'!
PASSED!

!testRun: #HumanoTest #test_10_NoAtacaSiEstaMuerto stamp: 'mg 4/5/2024 09:36:44'!
PASSED!
!Humano methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:36:51' prior: 50531251!
enfocarseEnElMasSano
	estrategia := [:candidatos |  	
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual].
		
		candidatosVivos isEmpty
			ifTrue: [candidatosOrdenados] 
			ifFalse: [candidatosOrdenados first: 1]		
	].
				
				! !
!Humano methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:36:54' prior: 50531111!
enfocarseEnElMasHerido	
	estrategia := [:candidatos |  	
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual < candidatos2 vidaActual].
		
		candidatosVivos isEmpty
			ifTrue: [candidatosOrdenados] 
			ifFalse: [candidatosOrdenados first: 1]		
	].
! !
!Ogro methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:37:20' prior: 50530410!
enfocarseEnElMasHerido
	
		estrategia := [:candidatos |  	
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual < candidatos2 vidaActual].
		
		candidatosVivos isEmpty
			ifTrue: [candidatosOrdenados] 
			ifFalse: [candidatosOrdenados first: 1]		
	].
! !
!Ogro methodsFor: 'strategy' stamp: 'mg 4/5/2024 09:37:25' prior: 50530427!
enfocarseEnElMasSano
	estrategia := [:candidatos |  	
		| candidatosVivos candidatosOrdenados |
		
		candidatosVivos := candidatos select: [:candidato | candidato estaMuerto not ].
		candidatosOrdenados := candidatosVivos sorted: [:candidatos1 :candidatos2 | candidatos1 vidaActual > candidatos2 vidaActual].
		
		candidatosVivos isEmpty
			ifTrue: [candidatosOrdenados] 
			ifFalse: [candidatosOrdenados first: 1]		
	].
				
! !

!testRun: #CombateTest #test01_ataquesCruzados stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #CombateTest #test02_atacanTodosLosCombatientes stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #CombateTest #test03_rondas stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #CombateTest #test04_hastaLaMuerteCombatienteBando2 stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #CombateTest #test05_combatienteBando1ViveSiMatoAlBando2 stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #CombateTest #test06_combateTerminaCuandoTodosLosDeUnBandoMueren stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #CombateTest #test07_finalizaCuandoMuereAlgunBando stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #CombateTest #test08_obtenerRondas stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #CombateTest #test09_obtenerGanador stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #CombateTest #test10_promedioVidaGanador stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #HostigadorTest #test01_HostigadorAtacaAlMasSano stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #HostigadorTest #test02_HostigadorAtacaAlMasSanoAlternaEstrategiaYAtacaAlMasHerido stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #HumanoTest #test01PuedoDefinirleUnaEstrategiaADavid stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #HumanoTest #test02EnfocarseEnElMasSanoAtacaAlMenosDañado stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #HumanoTest #test03EnfocarseEnElMasSanoAtacaAlMenosDañadoNoImportaElOrden stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #HumanoTest #test04EnfocarseEnElMasHeridoAtacaAlMasDañado stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #HumanoTest #test05NoSeEnfocaSiEstaMuerto stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #HumanoTest #test_01_GoliatEmpiezaSano stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #HumanoTest #test_02_GoliatNoEstaSanoSiRecibeDaño stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #HumanoTest #test_03_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #HumanoTest #test_04_CuandoSeDañaAAlguienEsPorUnaCantidadDeDaño stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #HumanoTest #test_05_GoliatPuedeRecibirDañoMultiplesVeces stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #HumanoTest #test_06_DavidPuedeAtacarAAlguien stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #HumanoTest #test_07_DavidPuedeAtacarEnemigosAsignados stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #HumanoTest #test_08_DavidNoAtacaAUnEnemigoNoAsignado stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #HumanoTest #test_09_MuereCuandoRecibe20DeDaño stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #HumanoTest #test_10_NoAtacaSiEstaMuerto stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #MagoTest #test_01_magoAtacaALos6MasSanos stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #MagoTest #test_02_magoAtacaALos6MasSanosPor2DeVida stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #MagoTest #test_03_magoAtacaALos5Sobrevivientes stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #MagoTest #test_04_magoNoAtacaPorqueEstanTodosSusEnemigosMuertos stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #OgroTest #test01_hace8DeDaño stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

!testRun: #OgroTest #test02_tiene40PuntosDeVida stamp: 'mg 4/5/2024 09:39:45'!
PASSED!

----STARTUP---- (5 April 2024 17:22:28) as C:\GITHUB\is1-leveroni\cuis\windows64\CuisUniversity-6169.image!


----End fileIn of C:\Users\mgismondi\Downloads\CodigoRepetido-Ejercicio.st----!
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 17:39:55' prior: 50531529!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50)
	
! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mg 4/5/2024 17:39:55'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mg 4/5/2024 17:39:55'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/5/2024 17:39:55'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/5/2024 17:39:55'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mg 4/5/2024 17:39:55'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/5/2024 17:39:55'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mg 4/5/2024 17:39:55'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mg 4/5/2024 17:39:55'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mg 4/5/2024 17:39:55'!
PASSED!
!CustomerBookTest methodsFor: 'nil' stamp: 'mg 4/5/2024 17:51:10'!
running: anAction takesLessThan: limitTime
	| millisecondsAfterRunning millisecondsBeforeRunning |
	millisecondsBeforeRunning := Time millisecondClockValue.
		
	anAction value.

	millisecondsAfterRunning := Time millisecondClockValue.
		
	^(millisecondsAfterRunning-millisecondsBeforeRunning) < limitTime.! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'mg 4/5/2024 17:51:19' prior: 50531822!
running: anAction takesLessThan: limitTime
	| millisecondsAfterRunning millisecondsBeforeRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue.	
	anAction value.
	millisecondsAfterRunning := Time millisecondClockValue.
		
	^(millisecondsAfterRunning-millisecondsBeforeRunning) < limitTime.! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'mg 4/5/2024 17:52:16' prior: 50531835!
running: anAction takesLessThan: limitTime
	| millisecondsAfterRunning millisecondsBeforeRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue.	
	anAction value.	
	millisecondsAfterRunning := Time millisecondClockValue.
		
	^(millisecondsAfterRunning-millisecondsBeforeRunning) < limitTime.! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 17:53:18' prior: 50531773!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self running: [customerBook addCustomerNamed: 'John Lennon'.] takesLessThan: 50 * millisecond ! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 17:54:01' prior: 50531861!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self assert: 
		(self running: [customerBook addCustomerNamed: 'John Lennon'.] 
			takesLessThan: 50 * millisecond
		)
	! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mg 4/5/2024 17:54:02'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mg 4/5/2024 17:54:02'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/5/2024 17:54:02'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/5/2024 17:54:02'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mg 4/5/2024 17:54:02'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/5/2024 17:54:02'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mg 4/5/2024 17:54:02'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mg 4/5/2024 17:54:02'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mg 4/5/2024 17:54:02'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 17:54:39' prior: 50531546!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.

	self assert: 
		(self running: [customerBook removeCustomerNamed: paulMcCartney.] 
				takesLessThan: 100 * millisecond
		)

! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/5/2024 17:54:42'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 17:54:55' prior: 50531915!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.

	self assert: 
		(self running: [customerBook removeCustomerNamed: paulMcCartney.] 
			takesLessThan: 100 * millisecond
		)

! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 17:54:57' prior: 50531931!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.

	self assert: 
		(self running: [customerBook removeCustomerNamed: paulMcCartney.] 
			takesLessThan: 100 * millisecond
		).

! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/5/2024 17:54:57'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/5/2024 17:55:38'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 17:56:20' prior: 50531943!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self assert: 
		(self running: [customerBook removeCustomerNamed: paulMcCartney.] 
			takesLessThan: 100 * millisecond
		).
! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/5/2024 17:56:23'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mg 4/5/2024 17:56:23'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/5/2024 17:56:23'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/5/2024 17:56:23'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mg 4/5/2024 17:56:23'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/5/2024 17:56:23'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mg 4/5/2024 17:56:23'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mg 4/5/2024 17:56:23'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mg 4/5/2024 17:56:23'!
PASSED!
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'mg 4/5/2024 18:03:59'!
value: anAction takesLessThan: limitTime
	| millisecondsAfterRunning millisecondsBeforeRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue.	
	anAction value.	
	millisecondsAfterRunning := Time millisecondClockValue.
		
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < limitTime.! !

!methodRemoval: CustomerBookTest #running:takesLessThan: stamp: 'mg 4/5/2024 18:04:21'!
running: anAction takesLessThan: limitTime
	| millisecondsAfterRunning millisecondsBeforeRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue.	
	anAction value.	
	millisecondsAfterRunning := Time millisecondClockValue.
		
	^(millisecondsAfterRunning-millisecondsBeforeRunning) < limitTime.!
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'mg 4/5/2024 18:05:06'!
value: anAction inLessThan: limitTime
	| millisecondsAfterRunning millisecondsBeforeRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue.	
	anAction value.	
	millisecondsAfterRunning := Time millisecondClockValue.
		
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < limitTime.! !

!methodRemoval: CustomerBookTest #value:takesLessThan: stamp: 'mg 4/5/2024 18:05:09'!
value: anAction takesLessThan: limitTime
	| millisecondsAfterRunning millisecondsBeforeRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue.	
	anAction value.	
	millisecondsAfterRunning := Time millisecondClockValue.
		
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < limitTime.!
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'mg 4/5/2024 18:05:52'!
assertValue: anAction takeLessThan: limitTime
	| millisecondsAfterRunning millisecondsBeforeRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue.	
	anAction value.	
	millisecondsAfterRunning := Time millisecondClockValue.
		
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < limitTime.! !

!methodRemoval: CustomerBookTest #value:inLessThan: stamp: 'mg 4/5/2024 18:06:11'!
value: anAction inLessThan: limitTime
	| millisecondsAfterRunning millisecondsBeforeRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue.	
	anAction value.	
	millisecondsAfterRunning := Time millisecondClockValue.
		
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < limitTime.!
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'mg 4/5/2024 18:06:25' prior: 50532061!
assertValue: anAction takeLessThan: aTimeLimit
	| millisecondsAfterRunning millisecondsBeforeRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue.	
	anAction value.	
	millisecondsAfterRunning := Time millisecondClockValue.
		
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < aTimeLimit.! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 18:06:56' prior: 50531871!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self assertValue: [customerBook addCustomerNamed: 'John Lennon'.]  takeLessThan: 50 * millisecond! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 18:07:07' prior: 50532100!
test01AddingCustomerShouldNotTakeMoreThan50Milliseconds

	| customerBook |
	
	customerBook := CustomerBook new.
	
	self 
		assertValue: [customerBook addCustomerNamed: 'John Lennon'.]  
		takeLessThan: 50 * millisecond! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 18:07:27' prior: 50531963!
test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds

	| customerBook paulMcCartney |
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	
	self 
		assertValue: [customerBook removeCustomerNamed: paulMcCartney.] 
		takeLessThan: 100 * millisecond
! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/5/2024 18:07:28'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mg 4/5/2024 18:07:28'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/5/2024 18:07:28'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/5/2024 18:07:28'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mg 4/5/2024 18:07:28'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/5/2024 18:07:28'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mg 4/5/2024 18:07:28'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mg 4/5/2024 18:07:28'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mg 4/5/2024 18:07:28'!
PASSED!
!CustomerBookTest methodsFor: 'nil' stamp: 'mg 4/5/2024 18:11:57'!
assert: aCollectionOfBlocks on: anErrorType whenValuing: aBlock 

	[aBlock value. self fail]
		on: anErrorType 
		do: [:anError | 
			aCollectionOfBlocks do: [:block |
				self assert: block
			]
		]
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'mg 4/5/2024 18:12:00' prior: 50532166!
assert: aCollectionOfBlocks on: anErrorType whenValuing: aBlock 

	[aBlock value. self fail]
		on: anErrorType 
		do: [:anError | 
			aCollectionOfBlocks do: [:block |
				self assert: block
			]
		]
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'mg 4/5/2024 18:12:31' prior: 50532087!
assertValue: aBlock takeLessThan: aTimeLimit
	| millisecondsAfterRunning millisecondsBeforeRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue.	
	aBlock value.	
	millisecondsAfterRunning := Time millisecondClockValue.
		
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < aTimeLimit.! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 18:14:35' prior: 50531566!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	self 
		assert: {
			[:anError | anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.],
			[customerBook isEmpty]
		}
		on: Error
		whenValuing: [customerBook addCustomerNamed: ''] ! !

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/5/2024 18:14:52'!
ERROR!
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'mg 4/5/2024 18:15:18' prior: 50532176!
assert: aCollectionOfBlocks on: anErrorType whenValuing: aBlock 

	[aBlock value. self fail]
		on: anErrorType 
		do: [:anError | 
			aCollectionOfBlocks do: [:block |
				self assert: (block value: anError)
			]
		]
! !

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/5/2024 18:15:27'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 18:15:50' prior: 50532199!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	self 
		assert: {
			[:anError | anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.],
			[:anError | customerBook isEmpty]
		}
		on: Error
		whenValuing: [customerBook addCustomerNamed: ''] ! !

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/5/2024 18:15:52'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 18:16:01' prior: 50532228!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	self 
		assert: {
			[:anError | anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.].
			[customerBook isEmpty]
		}
		on: Error
		whenValuing: [customerBook addCustomerNamed: ''] ! !

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/5/2024 18:16:01'!
ERROR!
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 18:16:08' prior: 50532244!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	self 
		assert: {
			[:anError | anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.].
			[:anError | customerBook isEmpty]
		}
		on: Error
		whenValuing: [customerBook addCustomerNamed: ''] ! !

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/5/2024 18:16:09'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mg 4/5/2024 18:16:09'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/5/2024 18:16:09'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/5/2024 18:16:09'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mg 4/5/2024 18:16:09'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/5/2024 18:16:09'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mg 4/5/2024 18:16:09'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mg 4/5/2024 18:16:09'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mg 4/5/2024 18:16:09'!
PASSED!
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'mg 4/5/2024 18:20:41'!
assertValue: aCollectionOfBlocks on: anErrorType whenValuing: aBlock 

	[aBlock value. self fail]
		on: anErrorType 
		do: [:anError | 
			aCollectionOfBlocks do: [:block |
				self assert: (block value: anError)
			]
		]
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'mg 4/5/2024 18:20:41' prior: 50532260!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	self 
		assertValue: {
			[:anError | anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.].
			[:anError | customerBook isEmpty]
		}
		on: Error
		whenValuing: [customerBook addCustomerNamed: ''] ! !

!methodRemoval: CustomerBookTest #assert:on:whenValuing: stamp: 'mg 4/5/2024 18:20:41'!
assert: aCollectionOfBlocks on: anErrorType whenValuing: aBlock 

	[aBlock value. self fail]
		on: anErrorType 
		do: [:anError | 
			aCollectionOfBlocks do: [:block |
				self assert: (block value: anError)
			]
		]
!
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 18:23:38' prior: 50532317!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	self 
		assertValue: {
			[:anError | anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.].
			[:anError | customerBook isEmpty]
		}
		on: Error
		whenValuing: [customerBook addCustomerNamed: ''] ! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 18:24:44' prior: 50531578!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self 
		assertValue: {
			[:anError | customerBook numberOfCustomers = 1].
			[:anError | customerBook includesCustomerNamed: johnLennon ]
		}
		on: NotFound
		whenValuing: [customerBook removeCustomerNamed: 'Paul McCartney'.]! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mg 4/5/2024 18:24:44'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mg 4/5/2024 18:24:44'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/5/2024 18:24:44'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/5/2024 18:24:44'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mg 4/5/2024 18:24:44'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/5/2024 18:24:44'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mg 4/5/2024 18:24:44'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mg 4/5/2024 18:24:44'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mg 4/5/2024 18:24:44'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 18:25:59' prior: 50531633!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self 
		assertValue: {
			[:anError | customerBook numberOfCustomers = 1].
			[:anError | customerBook includesCustomerNamed: johnLennon]
		}
		on: CantSuspend
		whenValuing: [customerBook suspendCustomerNamed: 'Ringo Starr'.] 
	! !

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mg 4/5/2024 18:26:00'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mg 4/5/2024 18:26:00'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/5/2024 18:26:00'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/5/2024 18:26:00'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mg 4/5/2024 18:26:00'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/5/2024 18:26:00'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mg 4/5/2024 18:26:00'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mg 4/5/2024 18:26:00'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mg 4/5/2024 18:26:00'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 18:26:52' prior: 50531649!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	self 
		assertValue: {
			[:anError | customerBook numberOfCustomers = 1].
			[:anError | customerBook includesCustomerNamed: johnLennon]
		}
		on: CantSuspend
		whenValuing: [customerBook suspendCustomerNamed: johnLennon.] 
! !

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mg 4/5/2024 18:26:53'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mg 4/5/2024 18:26:53'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/5/2024 18:26:53'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/5/2024 18:26:53'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mg 4/5/2024 18:26:53'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/5/2024 18:26:53'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mg 4/5/2024 18:26:53'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mg 4/5/2024 18:26:53'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mg 4/5/2024 18:26:53'!
PASSED!
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 18:27:21' prior: 50532451!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	self 
		assertValue: {
			[:anError | customerBook numberOfCustomers = 1].
			[:anError | customerBook includesCustomerNamed: johnLennon]
		}
		on: CantSuspend
		whenValuing: [customerBook suspendCustomerNamed: johnLennon.]! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'mg 4/5/2024 18:27:57'!
whenValuing: aBlock on: anErrorType assertValue: aCollectionOfBlocks 

	[aBlock value. self fail]
		on: anErrorType 
		do: [:anError | 
			aCollectionOfBlocks do: [:block |
				self assert: (block value: anError)
			]
		]
! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'mg 4/5/2024 18:27:57' prior: 50532502!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	self 
		whenValuing: {
			[:anError | customerBook numberOfCustomers = 1].
			[:anError | customerBook includesCustomerNamed: johnLennon]
		}
		on: CantSuspend
		assertValue: [customerBook suspendCustomerNamed: johnLennon.]! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'mg 4/5/2024 18:27:57' prior: 50532340!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	self 
		whenValuing: {
			[:anError | anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.].
			[:anError | customerBook isEmpty]
		}
		on: Error
		assertValue: [customerBook addCustomerNamed: ''] ! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'mg 4/5/2024 18:27:57' prior: 50532402!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self 
		whenValuing: {
			[:anError | customerBook numberOfCustomers = 1].
			[:anError | customerBook includesCustomerNamed: johnLennon]
		}
		on: CantSuspend
		assertValue: [customerBook suspendCustomerNamed: 'Ringo Starr'.] 
	! !
!CustomerBookTest methodsFor: 'as yet unclassified' stamp: 'mg 4/5/2024 18:27:57' prior: 50532353!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self 
		whenValuing: {
			[:anError | customerBook numberOfCustomers = 1].
			[:anError | customerBook includesCustomerNamed: johnLennon ]
		}
		on: NotFound
		assertValue: [customerBook removeCustomerNamed: 'Paul McCartney'.]! !

!methodRemoval: CustomerBookTest #assertValue:on:whenValuing: stamp: 'mg 4/5/2024 18:27:57'!
assertValue: aCollectionOfBlocks on: anErrorType whenValuing: aBlock 

	[aBlock value. self fail]
		on: anErrorType 
		do: [:anError | 
			aCollectionOfBlocks do: [:block |
				self assert: (block value: anError)
			]
		]
!
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 18:28:24' prior: 50532531!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	self 
		whenValuing: [customerBook suspendCustomerNamed: johnLennon.]
		on: CantSuspend
		assertValue:  {
			[:anError | customerBook numberOfCustomers = 1].
			[:anError | customerBook includesCustomerNamed: johnLennon]
		}! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 18:28:37' prior: 50532562!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self 
		whenValuing: [customerBook suspendCustomerNamed: 'Ringo Starr'.] 
		on: CantSuspend
		assertValue: {
			[:anError | customerBook numberOfCustomers = 1].
			[:anError | customerBook includesCustomerNamed: johnLennon]
		}
	! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 18:28:50' prior: 50532549!
test03CanNotAddACustomerWithEmptyName 

	| customerBook |
			
	customerBook := CustomerBook new.

	self 
		whenValuing: [customerBook addCustomerNamed: '']
		on: Error
		assertValue: {
			[:anError | anError messageText = CustomerBook customerCanNotBeEmptyErrorMessage.].
			[:anError | customerBook isEmpty]
		}! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/5/2024 18:29:04' prior: 50532579!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self 
		whenValuing: [customerBook removeCustomerNamed: 'Paul McCartney'.]
		on: NotFound
		assertValue: {
			[:anError | customerBook numberOfCustomers = 1].
			[:anError | customerBook includesCustomerNamed: johnLennon ]
		} ! !

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mg 4/5/2024 18:29:05'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mg 4/5/2024 18:29:05'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/5/2024 18:29:05'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/5/2024 18:29:05'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mg 4/5/2024 18:29:05'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/5/2024 18:29:05'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mg 4/5/2024 18:29:05'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mg 4/5/2024 18:29:05'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mg 4/5/2024 18:29:05'!
PASSED!
!CustomerBookTest methodsFor: 'private' stamp: 'mg 4/5/2024 18:39:30'!
assert: aCustomerBook includes: aCollectionOfActiveCustomers xxx: aCollectionOfSuspendedCustomers

	self assert: aCollectionOfActiveCustomers size equals: aCustomerBook numberOfActiveCustomers.
	self assert: aCollectionOfSuspendedCustomers size equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: aCollectionOfActiveCustomers size + aCollectionOfSuspendedCustomers size equals: aCustomerBook numberOfCustomers.

	aCollectionOfActiveCustomers do: [:aCustomer |
		self assert: (aCustomerBook includesCustomerNamed: aCustomer)
	].

	aCollectionOfSuspendedCustomers do: [:aCustomer |
		self deny: (aCustomerBook includesCustomerNamed: aCustomer)
	].! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/6/2024 18:05:08' prior: 50531593!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: customerBook
	includes:  {paulMcCartney}
	xxx: {}.
	
! !
!CustomerBookTest methodsFor: 'private' stamp: 'mg 4/6/2024 18:08:25'!
assert: aCustomerBook includes: aCollectionOfActiveCustomers andNot: aCollectionOfSuspendedCustomers

	self assert: aCollectionOfActiveCustomers size equals: aCustomerBook numberOfActiveCustomers.
	self assert: aCollectionOfSuspendedCustomers size equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: aCollectionOfActiveCustomers size + aCollectionOfSuspendedCustomers size equals: aCustomerBook numberOfCustomers.

	aCollectionOfActiveCustomers do: [:aCustomer |
		self assert: (aCustomerBook includesCustomerNamed: aCustomer)
	].

	aCollectionOfSuspendedCustomers do: [:aCustomer |
		self deny: (aCustomerBook includesCustomerNamed: aCustomer)
	].! !

!methodRemoval: CustomerBookTest #assert:includes:xxx: stamp: 'mg 4/6/2024 18:09:18'!
assert: aCustomerBook includes: aCollectionOfActiveCustomers xxx: aCollectionOfSuspendedCustomers

	self assert: aCollectionOfActiveCustomers size equals: aCustomerBook numberOfActiveCustomers.
	self assert: aCollectionOfSuspendedCustomers size equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: aCollectionOfActiveCustomers size + aCollectionOfSuspendedCustomers size equals: aCustomerBook numberOfCustomers.

	aCollectionOfActiveCustomers do: [:aCustomer |
		self assert: (aCustomerBook includesCustomerNamed: aCustomer)
	].

	aCollectionOfSuspendedCustomers do: [:aCustomer |
		self deny: (aCustomerBook includesCustomerNamed: aCustomer)
	].!
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/6/2024 18:09:43' prior: 50532724!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: customerBook
	includes:  {paulMcCartney}
	andNot: {}.
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/6/2024 18:10:13' prior: 50531612!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: customerBook
	includes:  {}
	andNot: {}.	
! !

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:10:13'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mg 4/6/2024 18:10:13'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/6/2024 18:10:13'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/6/2024 18:10:13'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mg 4/6/2024 18:10:13'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:10:13'!
FAILURE!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:10:13'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mg 4/6/2024 18:10:13'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mg 4/6/2024 18:10:13'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:10:13'!
FAILURE!
!CustomerBookTest methodsFor: 'private' stamp: 'mg 4/6/2024 18:12:10'!
assert: aCustomerBook includes: aCollectionOfActiveCustomers hasSuspended: aCollectionOfSuspendedCustomers andNotHave: aCollectionOfDeletedCustomers

	self assert: aCollectionOfActiveCustomers size equals: aCustomerBook numberOfActiveCustomers.
	self assert: aCollectionOfSuspendedCustomers size equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: aCollectionOfActiveCustomers size + aCollectionOfSuspendedCustomers size equals: aCustomerBook numberOfCustomers.

	aCollectionOfActiveCustomers do: [:aCustomer |
		self assert: (aCustomerBook includesCustomerNamed: aCustomer)
	].

	aCollectionOfSuspendedCustomers do: [:aCustomer |
		self deny: (aCustomerBook includesCustomerNamed: aCustomer)
	].! !

!methodRemoval: CustomerBookTest #assert:includes:andNot: stamp: 'mg 4/6/2024 18:12:16'!
assert: aCustomerBook includes: aCollectionOfActiveCustomers andNot: aCollectionOfSuspendedCustomers

	self assert: aCollectionOfActiveCustomers size equals: aCustomerBook numberOfActiveCustomers.
	self assert: aCollectionOfSuspendedCustomers size equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: aCollectionOfActiveCustomers size + aCollectionOfSuspendedCustomers size equals: aCustomerBook numberOfCustomers.

	aCollectionOfActiveCustomers do: [:aCustomer |
		self assert: (aCustomerBook includesCustomerNamed: aCustomer)
	].

	aCollectionOfSuspendedCustomers do: [:aCustomer |
		self deny: (aCustomerBook includesCustomerNamed: aCustomer)
	].!
!CustomerBookTest methodsFor: 'private' stamp: 'mg 4/6/2024 18:12:50' prior: 50532850!
assert: aCustomerBook includes: aCollectionOfActiveCustomers hasSuspended: aCollectionOfSuspendedCustomers andNotHave: aCollectionOfDeletedCustomers

	self assert: aCollectionOfActiveCustomers size equals: aCustomerBook numberOfActiveCustomers.
	self assert: aCollectionOfSuspendedCustomers size equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: aCollectionOfActiveCustomers size + aCollectionOfSuspendedCustomers size equals: aCustomerBook numberOfCustomers.

	aCollectionOfActiveCustomers do: [:aCustomer |
		self assert: (aCustomerBook includesCustomerNamed: aCustomer)
	].

	aCollectionOfSuspendedCustomers do: [:aCustomer |
		self deny: (aCustomerBook includesCustomerNamed: aCustomer)
	].

	aCollectionOfDeletedCustomers do: [:aCustomer |
		self deny: (aCustomerBook includesCustomerNamed: aCustomer)
	].! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/6/2024 18:13:50' prior: 50532784!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self
		assert: customerBook
		includes:  {paulMcCartney}
		
	
! !
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/6/2024 18:14:33' prior: 50532928!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self
		assert: customerBook
		includes: {paulMcCartney}
		hasSuspended: {}
		andNotHave: {}
		
	
! !

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:14:35'!
FAILURE!
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/6/2024 18:15:11' prior: 50532798!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self
		assert: customerBook
		includes: {}
		hasSuspended: {}
		andNotHave: {paulMcCartney}
! !

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:15:13'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mg 4/6/2024 18:15:13'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/6/2024 18:15:13'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/6/2024 18:15:13'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mg 4/6/2024 18:15:13'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:15:13'!
FAILURE!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:15:13'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mg 4/6/2024 18:15:13'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mg 4/6/2024 18:15:13'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:15:13'!
FAILURE!
!CustomerBookTest methodsFor: 'private' stamp: 'mg 4/6/2024 18:16:53' prior: 50532899!
assert: aCustomerBook includes: aCollectionOfActiveCustomers hasSuspended: aCollectionOfSuspendedCustomers andNotHave: aCollectionOfDeletedCustomers

	self assert: (aCollectionOfActiveCustomers size = aCustomerBook numberOfActiveCustomers).
	self assert: (aCollectionOfSuspendedCustomers size = aCustomerBook numberOfSuspendedCustomers).
	self assert: (aCollectionOfActiveCustomers size + aCollectionOfSuspendedCustomers size = aCustomerBook numberOfCustomers).

	aCollectionOfActiveCustomers do: [:aCustomer |
		self assert: (aCustomerBook includesCustomerNamed: aCustomer)
	].

	aCollectionOfSuspendedCustomers do: [:aCustomer |
		self deny: (aCustomerBook includesCustomerNamed: aCustomer)
	].

	aCollectionOfDeletedCustomers do: [:aCustomer |
		self deny: (aCustomerBook includesCustomerNamed: aCustomer)
	].! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mg 4/6/2024 18:16:54'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/6/2024 18:16:54'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/6/2024 18:16:54'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mg 4/6/2024 18:16:54'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:16:54'!
FAILURE!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:16:54'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mg 4/6/2024 18:16:54'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mg 4/6/2024 18:16:54'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:16:54'!
FAILURE!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mg 4/6/2024 18:17:10'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/6/2024 18:17:10'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/6/2024 18:17:10'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mg 4/6/2024 18:17:10'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:17:10'!
FAILURE!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:17:10'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mg 4/6/2024 18:17:10'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mg 4/6/2024 18:17:10'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:17:10'!
FAILURE!
!CustomerBookTest methodsFor: 'testing' stamp: 'mg 4/6/2024 18:18:42' prior: 50532942!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self
		assert: customerBook
		includes: {}
		hasSuspended: {paulMcCartney}
		andNotHave: {}
		
	
! !

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:18:43'!
FAILURE!
!CustomerBookTest methodsFor: 'private' stamp: 'mg 4/6/2024 18:19:12' prior: 50533015!
assert: aCustomerBook includes: aCollectionOfActiveCustomers hasSuspended: aCollectionOfSuspendedCustomers andNotHave: aCollectionOfDeletedCustomers

	self assert: (aCollectionOfActiveCustomers size = aCustomerBook numberOfActiveCustomers).
	self assert: (aCollectionOfSuspendedCustomers size = aCustomerBook numberOfSuspendedCustomers).
	self assert: (aCollectionOfActiveCustomers size + aCollectionOfSuspendedCustomers size = aCustomerBook numberOfCustomers).

	aCollectionOfActiveCustomers do: [:aCustomer |
		self assert: (aCustomerBook includesCustomerNamed: aCustomer)
	].

	aCollectionOfSuspendedCustomers do: [:aCustomer |
		self assert: (aCustomerBook includesCustomerNamed: aCustomer)
	].

	aCollectionOfDeletedCustomers do: [:aCustomer |
		self deny: (aCustomerBook includesCustomerNamed: aCustomer)
	].! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'mg 4/6/2024 18:19:13'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'mg 4/6/2024 18:19:13'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'mg 4/6/2024 18:19:13'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'mg 4/6/2024 18:19:13'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:19:13'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'mg 4/6/2024 18:19:13'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'mg 4/6/2024 18:19:13'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'mg 4/6/2024 18:19:13'!
PASSED!

----STARTUP---- (9 April 2024 19:46:40) as C:\GITHUB\is1-leveroni\cuis\windows64\CuisUniversity-6169.image!


5 == 6!

5!

5!

----STARTUP---- (12 April 2024 18:52:10) as C:\GITHUB\is1-leveroni\cuis\windows64\CuisUniversity-6169.image!


----End fileIn of C:\GITHUB\is1-leveroni\ejs\numeros\Numeros-Parte1-Ejercicio.st----!

Numero subclass: #AAA
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

Numero subclass: #AAA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #AAA category: #'Numeros-Parte1-Ejercicio' stamp: 'mg 4/12/2024 18:57:27'!
Numero subclass: #AAA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

Numero subclass: #BBB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #BBB category: #'Numeros-Parte1-Ejercicio' stamp: 'mg 4/12/2024 18:57:30'!
Numero subclass: #BBB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!BBB methodsFor: 'nil' stamp: 'mg 4/12/2024 18:58:00'!
xxx! !
!AAA methodsFor: 'nil' stamp: 'mg 4/12/2024 18:58:27'!
xxx
	^value < 0! !
!BBB methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 18:58:42' prior: 50533558!
xxx
	^denominator < 0! !
!AAA methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 18:59:08' overrides: 50533386!
isNegative
	^value < 0! !
!AAA methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 18:59:15' prior: 50533568 overrides: 50533386!
isNegative
	^value < 0! !

!methodRemoval: AAA #xxx stamp: 'mg 4/12/2024 18:59:20'!
xxx
	^value < 0!
!BBB methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 18:59:36' overrides: 50533386!
isNegative
	^denominator < 0! !

!methodRemoval: BBB #xxx stamp: 'mg 4/12/2024 18:59:36'!
xxx
	^denominator < 0!

!classRenamed: #AAA as: #Entero stamp: 'mg 4/12/2024 18:59:55'!
Smalltalk renameClassNamed: #AAA as: #Entero!
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 18:59:55' prior: 50533360!
+ anAdder 
	
	(type = #Entero and: [anAdder type = #Entero]) ifTrue:
		[ ^self class with: value + anAdder integerValue ].
	
	(type = #Fraccion and: [anAdder type = #Fraccion]) ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].
	
	self error: 'Tipo de número no soportado'
	! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 18:59:55' prior: 50533460 overrides: 16913626!
hash
	type = #Entero ifTrue:
		[ ^value hash ].
	type = #Fraccion ifTrue:
		[ ^(numerator hash / denominator hash) hash ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 18:59:55' prior: 50533440 overrides: 16914834!
printOn: aStream
	
	type = #Entero ifTrue:
		[ aStream print: value ].
	
	type = #Fraccion ifTrue:
		[ aStream 
			print: numerator;
			nextPut: $/;
			print: denominator ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 18:59:55' prior: 50533392!
isOne

	type = #Entero ifTrue:
		[ ^value = 1 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 18:59:55' prior: 50533403!
initializeWith: aValue
	
	type := #Entero.
	value := aValue! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 18:59:55' prior: 50533467!
// aDivisor 
	
	type = #Entero ifTrue:
		[ ^self class with: value // aDivisor integerValue ].
		
	self error: 'Tipo de número no soportado'! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 18:59:55' prior: 50533386!
isNegative
	
	type = #Entero ifTrue:
		[ ^value < 0 ].
	type = #Fraccion ifTrue:
		[ ^denominator < 0 ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 18:59:55' prior: 50533449 overrides: 16913610!
= anObject

	^(anObject isKindOf: self class) and: [ type = anObject type and: 
		[ type = #Entero ifTrue: [ value = anObject integerValue] 
		ifFalse: [ type = #Fraccion ifTrue:
			[ (numerator * anObject denominator) = (denominator * anObject numerator) ]]]]! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 18:59:55' prior: 50533397!
isZero

	type = #Entero ifTrue:
		[ ^value = 0 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 18:59:55' prior: 50533378!
negated
	
	type = #Entero ifTrue:
		[ ^self * (self class with: -1) ].
	type = #Fraccion ifTrue:
		[ ^self class with: numerator * (self class with: -1) over: denominator ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 18:59:56' prior: 50533346!
* aMultiplier 

	(type = #Entero and: [aMultiplier type = #Entero]) ifTrue:	
		[ ^self class with: value * aMultiplier integerValue ].
		
	(type = #Fraccion and: [aMultiplier type = #Fraccion]) ifTrue:
		[ ^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator) ].
		
	self error: 'Tipo de número no soportado'
	! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 18:59:56' prior: 50533475!
greatestCommonDivisorWith: anEntero 
	
	type = #Entero ifTrue:
		[^self class with: (value gcd: anEntero integerValue)].
		
	self error: 'Tipo de número no soportado'! !

!classRenamed: #Entero as: #Fraccion stamp: 'mg 4/12/2024 19:00:10'!
Smalltalk renameClassNamed: #Entero as: #Fraccion!
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:10' prior: 50533678!
* aMultiplier 

	(type = #Fraccion and: [aMultiplier type = #Fraccion]) ifTrue:	
		[ ^self class with: value * aMultiplier integerValue ].
		
	(type = #Fraccion and: [aMultiplier type = #Fraccion]) ifTrue:
		[ ^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator) ].
		
	self error: 'Tipo de número no soportado'
	! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:10' prior: 50533636!
// aDivisor 
	
	type = #Fraccion ifTrue:
		[ ^self class with: value // aDivisor integerValue ].
		
	self error: 'Tipo de número no soportado'! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:10' prior: 50533669!
negated
	
	type = #Fraccion ifTrue:
		[ ^self * (self class with: -1) ].
	type = #Fraccion ifTrue:
		[ ^self class with: numerator * (self class with: -1) over: denominator ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:10' prior: 50533408!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:=#Fraccion.
	numerator := aNumerator.
	denominator := aDenominator ! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:10' prior: 50533631!
initializeWith: aValue
	
	type := #Fraccion.
	value := aValue! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:10' prior: 50533644!
isNegative
	
	type = #Fraccion ifTrue:
		[ ^value < 0 ].
	type = #Fraccion ifTrue:
		[ ^denominator < 0 ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:10' prior: 50533663!
isZero

	type = #Fraccion ifTrue:
		[ ^value = 0 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:10' prior: 50533625!
isOne

	type = #Fraccion ifTrue:
		[ ^value = 1 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:10' prior: 50533589!
+ anAdder 
	
	(type = #Fraccion and: [anAdder type = #Fraccion]) ifTrue:
		[ ^self class with: value + anAdder integerValue ].
	
	(type = #Fraccion and: [anAdder type = #Fraccion]) ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].
	
	self error: 'Tipo de número no soportado'
	! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:10' prior: 50533608 overrides: 16913626!
hash
	type = #Fraccion ifTrue:
		[ ^value hash ].
	type = #Fraccion ifTrue:
		[ ^(numerator hash / denominator hash) hash ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:10' prior: 50533651 overrides: 16913610!
= anObject

	^(anObject isKindOf: self class) and: [ type = anObject type and: 
		[ type = #Fraccion ifTrue: [ value = anObject integerValue] 
		ifFalse: [ type = #Fraccion ifTrue:
			[ (numerator * anObject denominator) = (denominator * anObject numerator) ]]]]! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:10' prior: 50533616 overrides: 16914834!
printOn: aStream
	
	type = #Fraccion ifTrue:
		[ aStream print: value ].
	
	type = #Fraccion ifTrue:
		[ aStream 
			print: numerator;
			nextPut: $/;
			print: denominator ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:10' prior: 50533693!
greatestCommonDivisorWith: anEntero 
	
	type = #Fraccion ifTrue:
		[^self class with: (value gcd: anEntero integerValue)].
		
	self error: 'Tipo de número no soportado'! !

!classRenamed: #Fraccion as: #Entero stamp: 'mg 4/12/2024 19:00:20'!
Smalltalk renameClassNamed: #Fraccion as: #Entero!
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:20' prior: 50533720!
// aDivisor 
	
	type = #Entero ifTrue:
		[ ^self class with: value // aDivisor integerValue ].
		
	self error: 'Tipo de número no soportado'! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:20' prior: 50533728!
negated
	
	type = #Entero ifTrue:
		[ ^self * (self class with: -1) ].
	type = #Entero ifTrue:
		[ ^self class with: numerator * (self class with: -1) over: denominator ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:20' prior: 50533825!
greatestCommonDivisorWith: anEntero 
	
	type = #Entero ifTrue:
		[^self class with: (value gcd: anEntero integerValue)].
		
	self error: 'Tipo de número no soportado'! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:20' prior: 50533737!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:=#Entero.
	numerator := aNumerator.
	denominator := aDenominator ! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:20' prior: 50533816 overrides: 16914834!
printOn: aStream
	
	type = #Entero ifTrue:
		[ aStream print: value ].
	
	type = #Entero ifTrue:
		[ aStream 
			print: numerator;
			nextPut: $/;
			print: denominator ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:20' prior: 50533796 overrides: 16913626!
hash
	type = #Entero ifTrue:
		[ ^value hash ].
	type = #Entero ifTrue:
		[ ^(numerator hash / denominator hash) hash ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:20' prior: 50533765!
isZero

	type = #Entero ifTrue:
		[ ^value = 0 ].
	type = #Entero ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:20' prior: 50533804 overrides: 16913610!
= anObject

	^(anObject isKindOf: self class) and: [ type = anObject type and: 
		[ type = #Entero ifTrue: [ value = anObject integerValue] 
		ifFalse: [ type = #Entero ifTrue:
			[ (numerator * anObject denominator) = (denominator * anObject numerator) ]]]]! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:20' prior: 50533771!
isOne

	type = #Entero ifTrue:
		[ ^value = 1 ].
	type = #Entero ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:20' prior: 50533758!
isNegative
	
	type = #Entero ifTrue:
		[ ^value < 0 ].
	type = #Entero ifTrue:
		[ ^denominator < 0 ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:20' prior: 50533705!
* aMultiplier 

	(type = #Entero and: [aMultiplier type = #Entero]) ifTrue:	
		[ ^self class with: value * aMultiplier integerValue ].
		
	(type = #Entero and: [aMultiplier type = #Entero]) ifTrue:
		[ ^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator) ].
		
	self error: 'Tipo de número no soportado'
	! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:20' prior: 50533753!
initializeWith: aValue
	
	type := #Entero.
	value := aValue! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:00:20' prior: 50533777!
+ anAdder 
	
	(type = #Entero and: [anAdder type = #Entero]) ifTrue:
		[ ^self class with: value + anAdder integerValue ].
	
	(type = #Entero and: [anAdder type = #Entero]) ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].
	
	self error: 'Tipo de número no soportado'
	! !

!classRenamed: #BBB as: #Fraccion stamp: 'mg 4/12/2024 19:01:22'!
Smalltalk renameClassNamed: #BBB as: #Fraccion!
!Numero methodsFor: 'testing' stamp: 'mg 4/12/2024 19:01:52' prior: 50533919!
isNegative
	
	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'mg 4/12/2024 19:01:54' prior: 50533966!
isNegative
	self subclassResponsibility ! !
!Numero methodsFor: 'testing' stamp: 'mg 4/12/2024 19:02:35' prior: 50533913!
isOne

	type = #Entero ifTrue:
		[ ^value = 1 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'testing' stamp: 'mg 4/12/2024 19:02:38' prior: 50533895!
isZero

	type = #Entero ifTrue:
		[ ^value = 0 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !

!methodRemoval: Numero #denominator stamp: 'mg 4/12/2024 19:03:06'!
denominator

	^denominator!

!classRemoval: #Fraccion stamp: 'mg 4/12/2024 19:03:22'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRemoval: #Entero stamp: 'mg 4/12/2024 19:03:22'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRemoval: #Numero stamp: 'mg 4/12/2024 19:03:22'!
Object subclass: #Numero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRemoval: #NumeroTest stamp: 'mg 4/12/2024 19:03:23'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

----End fileIn of C:\GITHUB\is1-leveroni\ejs\numeros\Numeros-Parte1-Ejercicio.st----!

Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #Entero category: #'Numeros-Parte1-Ejercicio' stamp: 'mg 4/12/2024 19:03:55'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #Fraccion category: #'Numeros-Parte1-Ejercicio' stamp: 'mg 4/12/2024 19:03:59'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!Fraccion methodsFor: 'nil' stamp: 'mg 4/12/2024 19:04:06' overrides: 50534208!
isNegative
	! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:04:17' prior: 50534376 overrides: 50534208!
isNegative
	^denominator < 0! !
!Numero methodsFor: 'testing' stamp: 'mg 4/12/2024 19:04:33' prior: 50534208!
isNegative
	self subclassResponsibility ! !
!Entero methodsFor: 'nil' stamp: 'mg 4/12/2024 19:04:43' overrides: 50534384!
isNegative
	^value < 0 ! !
!Numero class methodsFor: 'instance creation' stamp: 'mg 4/12/2024 19:06:15' prior: 50534318!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^Entero new initializeWith: aValue! !
!Numero class methodsFor: 'instance creation' stamp: 'mg 4/12/2024 19:06:22' prior: 50534329!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^Fraccion new initializeWith: numerator over: denominator! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 19:06:25'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 19:06:25'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 19:06:26'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 19:06:26'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 19:06:26'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 19:06:26'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 19:06:26'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 19:06:26'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 19:06:26'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:06:26'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:06:26'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 19:06:26'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 19:06:26'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 19:06:26'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 19:06:26'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 19:06:26'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 19:06:26'!
PASSED!
!Entero methodsFor: 'initialization' stamp: 'mg 4/12/2024 19:07:31' overrides: 50534225!
initializeWith: aValue
	
	type := #Entero.
	value := aValue! !

!methodRemoval: Numero #initializeWith: stamp: 'mg 4/12/2024 19:07:31'!
initializeWith: aValue
	
	type := #Entero.
	value := aValue!
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 19:07:38' overrides: 50534230!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:=#Fraccion.
	numerator := aNumerator.
	denominator := aDenominator ! !

!methodRemoval: Numero #initializeWith:over: stamp: 'mg 4/12/2024 19:07:38'!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:=#Fraccion.
	numerator := aNumerator.
	denominator := aDenominator !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 19:07:40'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 19:07:40'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 19:07:40'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 19:07:40'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 19:07:40'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 19:07:40'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 19:07:40'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 19:07:40'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 19:07:40'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:07:40'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:07:40'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 19:07:40'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 19:07:40'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 19:07:40'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 19:07:40'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 19:07:41'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 19:07:41'!
PASSED!
!Numero methodsFor: 'testing' stamp: 'mg 4/12/2024 19:09:59' prior: 50534214!
isOne

	self subclassResponsibility 
	type = #Entero ifTrue:
		[ ^value = 1 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Entero methodsFor: 'initialization' stamp: 'mg 4/12/2024 19:10:15' overrides: 50534575!
isOne
	^value = 1! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:10:23' overrides: 50534575!
isOne
	^false! !
!Numero methodsFor: 'testing' stamp: 'mg 4/12/2024 19:10:31' prior: 50534575!
isOne

	self subclassResponsibility! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 19:10:32'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 19:10:32'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 19:10:32'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 19:10:32'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 19:10:32'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 19:10:32'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 19:10:32'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 19:10:32'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 19:10:32'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:10:32'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:10:32'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 19:10:32'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 19:10:32'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 19:10:32'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 19:10:32'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 19:10:32'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 19:10:32'!
PASSED!
!Numero methodsFor: 'testing' stamp: 'mg 4/12/2024 19:10:34' prior: 50534589!
isOne
	self subclassResponsibility! !
!Numero methodsFor: 'testing' stamp: 'mg 4/12/2024 19:10:49' prior: 50534219!
isZero
	self subclassResponsibility! !
!Entero methodsFor: 'initialization' stamp: 'mg 4/12/2024 19:11:00' overrides: 50534652!
isZero
	^value = 0! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:11:08' overrides: 50534652!
isZero
	^false! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 19:11:12'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 19:11:12'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 19:11:12'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 19:11:12'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 19:11:12'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 19:11:12'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 19:11:12'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 19:11:12'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 19:11:12'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:11:12'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:11:12'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 19:11:12'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 19:11:12'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 19:11:12'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 19:11:12'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 19:11:12'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 19:11:12'!
PASSED!
!Numero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 19:16:44' prior: 50534168!
* aMultiplier 

	(type = #Entero) ifTrue:	
		[(aMultiplier type = #Entero)ifTrue: [
				^self class with: value * aMultiplier integerValue]
		].
		
	(type = #Fraccion) ifTrue:
		[(aMultiplier type = #Fraccion) ifTrue: [
			 ^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator)]
		].
		
	self error: 'Tipo de número no soportado'.! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 19:16:46'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 19:16:46'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 19:16:46'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 19:16:46'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 19:16:46'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 19:16:46'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 19:16:46'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 19:16:46'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 19:16:46'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:16:46'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:16:46'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 19:16:46'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 19:16:46'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 19:16:46'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 19:16:46'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 19:16:46'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 19:16:46'!
PASSED!
!Entero methodsFor: 'nil' stamp: 'mg 4/12/2024 19:17:36' overrides: 50534719!
* aMultiplier

	[(aMultiplier type = #Entero)ifTrue: [
				^self class with: value * aMultiplier integerValue]
	].! !
!Entero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:17:41' prior: 50534789 overrides: 50534719!
* aMultiplier
	[(aMultiplier type = #Entero) ifTrue: [
				^self class with: value * aMultiplier integerValue]
	].! !
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 19:18:30' overrides: 50534719!
* aMultiplier
	[(aMultiplier type = #Fraccion) ifTrue: [
			 ^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator)]
	].! !
!Numero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 19:18:42' prior: 50534719!
* aMultiplier 
	self subclassResponsibility ! !

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 19:18:50'!
PASSED!

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 19:18:50'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 19:18:50'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 19:18:50'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 19:18:50'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 19:18:50'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 19:18:50'!
FAILURE!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 19:18:50'!
FAILURE!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 19:18:50'!
FAILURE!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 19:18:50'!
FAILURE!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:18:50'!
FAILURE!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:18:50'!
FAILURE!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 19:18:50'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 19:18:50'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 19:18:50'!
FAILURE!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 19:18:50'!
FAILURE!
!Entero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:19:05' prior: 50534797 overrides: 50534813!
* aMultiplier
	[(aMultiplier type = #Entero) ifTrue: [
		^self class with: value * aMultiplier integerValue]
	].! !
!Entero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:19:32' prior: 50534869 overrides: 50534813!
* aMultiplier

	^self class with: value * aMultiplier integerValue! !
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 19:19:54' prior: 50534804 overrides: 50534813!
* aMultiplier
	 ^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator)! !

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 19:19:57'!
PASSED!

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 19:20:00'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 19:20:00'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 19:20:00'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 19:20:00'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 19:20:00'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 19:20:00'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 19:20:00'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 19:20:00'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 19:20:00'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:20:00'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:20:00'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 19:20:00'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 19:20:00'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 19:20:00'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 19:20:00'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 19:20:01'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 19:20:01'!
PASSED!
!Entero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:21:17' prior: 50534877 overrides: 50534813!
* aMultiplier

	^self class with: value * aMultiplier integerValue! !
!Entero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:22:27' overrides: 50534182!
+ anAdder

	^self class with: value + anAdder integerValue! !
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 19:23:26' prior: 50534883 overrides: 50534813!
* anAdder
	| newNumerator newDenominator |
	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.		

	^ self class with: newNumerator over: newDenominator.! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 19:23:30'!
PASSED!

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 19:23:30'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 19:23:30'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 19:23:30'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 19:23:30'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 19:23:30'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 19:23:30'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 19:23:30'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 19:23:30'!
FAILURE!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 19:23:30'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:23:30'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:23:30'!
FAILURE!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 19:23:30'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 19:23:30'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 19:23:30'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 19:23:30'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 19:23:30'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 19:23:30'!
PASSED!
!Numero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 19:23:44' prior: 50534182!
+ anAdder 

	! !
!Numero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:23:55' prior: 50535031!
+ anAdder

	self subclassResponsibility! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 19:23:57'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 19:23:57'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 19:23:57'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 19:23:57'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 19:23:57'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 19:23:58'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 19:23:58'!
ERROR!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 19:23:58'!
FAILURE!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 19:23:58'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:23:58'!
ERROR!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:23:58'!
FAILURE!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 19:23:58'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 19:23:58'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 19:23:58'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 19:23:58'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 19:23:58'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 19:23:58'!
PASSED!
!Numero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 19:24:39' prior: 50535035!
+ anAdders

	self subclassResponsibility! !
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 19:23:26' prior: 50534961 overrides: 50534813!
* anAdder
	| newNumerator newDenominator |
	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.		

	^ self class with: newNumerator over: newDenominator.! !
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 19:19:54' prior: 50535100 overrides: 50534813!
* aMultiplier
	 ^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator)! !
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 19:25:29' overrides: 50535095!
+ anAdder
	[ | newNumerator newDenominator |

		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].! !
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 19:25:41' prior: 50535119 overrides: 50535095!
+ anAdder
	| newNumerator newDenominator |

	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator .! !
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 19:25:44' prior: 50535131 overrides: 50535095!
+ anAdder
	| newNumerator newDenominator |

	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
		
	^ self class with: newNumerator over: newDenominator .! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 19:25:48'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 19:25:48'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 19:25:48'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 19:25:48'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 19:25:48'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 19:25:48'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 19:25:48'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 19:25:48'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 19:25:48'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:25:48'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:25:48'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 19:25:48'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 19:25:48'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 19:25:48'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 19:25:48'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 19:25:48'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 19:25:48'!
PASSED!
!Entero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:26:46' overrides: 50534289!
// aDivisor

	^self class with: value // aDivisor integerValue ! !
!Entero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:26:47' prior: 50535209 overrides: 50534289!
// aDivisor
	^self class with: value // aDivisor integerValue ! !
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 19:27:06' overrides: 50534289!
// aDivisor
	! !
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 19:27:21' prior: 50535220 overrides: 50534289!
// aDivisor
	self error: 'Tipo de número no soportado'! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'mg 4/12/2024 19:27:31' prior: 50534289!
// aDivisor 
	self subclassResponsibility ! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 19:27:31'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 19:27:31'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 19:27:31'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 19:27:31'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 19:27:31'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 19:27:31'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 19:27:31'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 19:27:31'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 19:27:32'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:27:32'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:27:32'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 19:27:32'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 19:27:32'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 19:27:32'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 19:27:32'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 19:27:32'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 19:27:32'!
PASSED!
!Entero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:28:03' overrides: 50534271!
= anObject
	! !
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 19:28:07' overrides: 50534271!
= anObject! !
!Entero class methodsFor: 'instance creation' stamp: 'mg 4/12/2024 19:37:52' overrides: 50534392!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^Entero new initializeWith: aValue! !

!methodRemoval: Numero class #with: stamp: 'mg 4/12/2024 19:37:52'!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^Entero new initializeWith: aValue!
!Fraccion class methodsFor: 'instance creation' stamp: 'mg 4/12/2024 19:38:08' overrides: 50534403!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^Fraccion new initializeWith: numerator over: denominator! !

!methodRemoval: Numero class #with:over: stamp: 'mg 4/12/2024 19:38:08'!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^Fraccion new initializeWith: numerator over: denominator!
!Entero class methodsFor: 'instance creation' stamp: 'mg 4/12/2024 19:38:34' prior: 50535298!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^self new initializeWith: aValue! !
!Fraccion class methodsFor: 'instance creation' stamp: 'mg 4/12/2024 19:38:39' prior: 50535319!
with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator! !
!Numero methodsFor: 'comparing' stamp: 'mg 4/12/2024 19:48:22' prior: 50534271 overrides: 16913610!
= anObject

	^(anObject isKindOf: self class) ifTrue:[
		
		type = anObject type ifTrue:[
			[ type = #Entero ifTrue: [ 
				value = anObject integerValue] 
		ifFalse: [ type = #Fraccion ifTrue:
			[ (numerator * anObject denominator) = (denominator * anObject numerator) ]]]]
]    ! !
!Numero methodsFor: 'comparing' stamp: 'mg 4/12/2024 19:48:30' prior: 50535394 overrides: 16913610!
= anObject

	^(anObject isKindOf: self class) ifTrue:[
		
		type = anObject type ifTrue:[
			 type = #Entero ifTrue: [ 
				value = anObject integerValue] 
		ifFalse: [ type = #Fraccion ifTrue:
			[ (numerator * anObject denominator) = (denominator * anObject numerator) ]]]
]    ! !
!Entero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 19:49:09' prior: 50535290 overrides: 50535407!
= anObject
	^value = anObject integerValue
	! !
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 19:50:27' prior: 50535294 overrides: 50535407!
= anObject
	^(numerator * anObject denominator) = (denominator * anObject numerator)! !
!Numero methodsFor: 'comparing' stamp: 'mg 4/12/2024 19:56:09' prior: 50535407 overrides: 16913610!
= anObject
	self subclassResponsibility ! !

Numero!
!NumeroTest methodsFor: 'setup' stamp: 'mg 4/12/2024 19:57:17' prior: 50534136 overrides: 16975661!
setUp

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := Fraccion with: one over: two.
	oneFifth := Fraccion with: one over: five.
	twoFifth := Fraccion with: two over: five.
	twoTwentyfifth := Fraccion with: two over: (Entero with: 25).
	fiveHalfs := Fraccion with: five over: two.
	! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 19:57:26'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 19:57:26'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 19:57:26'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 19:57:26'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 19:57:26'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 19:57:26'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 19:57:26'!
ERROR!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 19:57:26'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 19:57:26'!
ERROR!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:57:26'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 19:57:26'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 19:57:26'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 19:57:26'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 19:57:26'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 19:57:26'!
ERROR!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 19:57:26'!
ERROR!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 19:57:26'!
ERROR!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 19:57:30'!
ERROR!
!NumeroTest methodsFor: 'tests' stamp: 'mg 4/12/2024 19:58:06' prior: 50534065!
test07FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := Fraccion with: (Entero with: 7) over: (Entero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 19:58:08'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 19:58:09'!
ERROR!
!NumeroTest methodsFor: 'tests' stamp: 'mg 4/12/2024 19:58:17' prior: 50534087!
test09AparentFraccionesAreEqual

	self assert: oneHalf equals: (Fraccion with: two over: four)! !

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 19:58:18'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 19:58:19'!
ERROR!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 19:58:21'!
ERROR!
!NumeroTest methodsFor: 'tests' stamp: 'mg 4/12/2024 19:58:31' prior: 50534116!
test15NegationOfFraccionIsCorrect

	self assert: oneHalf negated equals: (Fraccion with: negativeOne over: two)! !

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 19:58:32'!
ERROR!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 19:58:47'!
ERROR!
!Numero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:01:43' prior: 50534200!
negated
	
	type = #Entero ifTrue:
		[ ^self * (self class with: -1) ].
	type = #Fraccion ifTrue:
		[ ^Fraccion with: numerator * (self class with: -1) over: denominator ].! !
!Numero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:01:59' prior: 50535562!
negated
	
	type = #Entero ifTrue:
		[ ^Entero * (Entero with: -1) ].
	type = #Fraccion ifTrue:
		[ ^Fraccion with: numerator * (self class with: -1) over: denominator ].! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:02:03'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:02:03'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:02:03'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:02:03'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:02:03'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:02:03'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:02:03'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:02:03'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:02:03'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:02:03'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:02:03'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:02:03'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:02:03'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:02:03'!
ERROR!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:02:03'!
ERROR!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:02:03'!
ERROR!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:02:03'!
ERROR!

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:02:16'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:02:16'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:02:16'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:02:16'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:02:16'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:02:16'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:02:16'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:02:16'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:02:16'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:02:16'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:02:16'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:02:16'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:02:16'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:02:16'!
ERROR!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:02:16'!
ERROR!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:02:16'!
ERROR!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:02:16'!
ERROR!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:02:18'!
ERROR!
!Numero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:02:42' prior: 50535571!
negated
	
	type = #Entero ifTrue:
		[ ^Entero * (Entero with: -1) ].
	type = #Fraccion ifTrue:
		[ ^Fraccion with: numerator * (self class with: -1) over: denominator ].! !
!Numero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:03:37' prior: 50535693!
negated
	
	type = #Entero ifTrue:
		[ ^self * (self class with: -1) ].
	type = #Fraccion ifTrue:
		[ ^Fraccion with: numerator * (self class with: -1) over: denominator ].! !
!Numero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:03:56' prior: 50535702!
negated
	
	type = #Entero ifTrue:
		[ ^self * (self class with: -1) ].
	type = #Fraccion ifTrue:
		[ ^self class  with: numerator * (self class with: -1) over: denominator ].! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:03:59'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:03:59'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:03:59'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:03:59'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:04:00'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:04:00'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:04:00'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:04:00'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:04:00'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:04:00'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:04:00'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:04:00'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:04:00'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:04:00'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:04:00'!
ERROR!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:04:00'!
ERROR!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:04:00'!
ERROR!
!Entero methodsFor: 'nil' stamp: 'mg 4/12/2024 20:04:32' overrides: 50535711!
negated
	^self * (self class with: -1)! !
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 20:04:56' overrides: 50535711!
negated
	^self class  with: numerator * (self class with: -1) over: denominator! !
!Numero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:05:11' prior: 50535711!
negated
	
	self subclassResponsibility ! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:05:14'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:05:14'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:05:14'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:05:14'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:05:14'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:05:14'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:05:14'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:05:14'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:05:14'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:05:14'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:05:14'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:05:14'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:05:14'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:05:14'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:05:14'!
ERROR!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:05:14'!
ERROR!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:05:14'!
ERROR!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:05:16'!
ERROR!
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 20:05:45' prior: 50535780 overrides: 50535786!
negated
	^self class  with: numerator * (Entero with: -1) over: denominator! !

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:05:46'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:05:48'!
ERROR!
!NumeroTest methodsFor: 'tests' stamp: 'mg 4/12/2024 20:05:59' prior: 50534122!
test16SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (Fraccion with: negativeOne over: negativeTwo)! !

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:06:01'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:06:02'!
ERROR!
!NumeroTest methodsFor: 'tests' stamp: 'mg 4/12/2024 20:06:11' prior: 50534129!
test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (Fraccion with: one over: negativeTwo)! !

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:06:12'!
PASSED!

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:06:16'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:06:16'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:06:17'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:06:17'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:06:17'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:06:17'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:06:17'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:06:17'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:06:17'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:06:17'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:06:17'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:06:17'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:06:17'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:06:17'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:06:17'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:06:17'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:06:17'!
PASSED!
!Numero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:06:38' prior: 50535095!
+ anAdders
	self subclassResponsibility! !
!Entero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 20:07:38' overrides: 50534297!
greatestCommonDivisorWith: anEntero ! !
!Entero methodsFor: 'as yet unclassified' stamp: 'mg 4/12/2024 20:07:51' prior: 50535948 overrides: 50534297!
greatestCommonDivisorWith: anEntero 
	^self class with: (value gcd: anEntero integerValue)! !
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 20:08:36' overrides: 50534297!
greatestCommonDivisorWith: anEntero ! !
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 20:08:43' prior: 50535959 overrides: 50534297!
greatestCommonDivisorWith: anEntero 
! !
!Fraccion methodsFor: 'initialization' stamp: 'mg 4/12/2024 20:09:01' prior: 50535964 overrides: 50534297!
greatestCommonDivisorWith: anEntero 
	^self error: 'Tipo de número no soportado'! !
!Numero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:09:17' prior: 50534297!
greatestCommonDivisorWith: anEntero 
	^self subclassResponsibility ! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:09:20'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:09:20'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:09:20'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:09:20'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:09:20'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:09:20'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:09:20'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:09:20'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:09:20'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:09:20'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:09:20'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:09:20'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:09:20'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:09:20'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:09:20'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:09:20'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:09:20'!
PASSED!

!classRemoval: #Fraccion stamp: 'mg 4/12/2024 20:14:31'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRemoval: #Entero stamp: 'mg 4/12/2024 20:14:31'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRemoval: #Numero stamp: 'mg 4/12/2024 20:14:31'!
Object subclass: #Numero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRemoval: #NumeroTest stamp: 'mg 4/12/2024 20:14:32'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

----End fileIn of C:\GITHUB\is1-leveroni\ejs\numeros\Numeros-Parte2-Ejercicio.st----!

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:18:34'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:18:34'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 20:18:34'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 20:18:34'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:18:34'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:18:34'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 20:18:34'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:18:34'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:18:35'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:18:35'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:18:35'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:18:35'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:18:35'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 20:18:35'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 20:18:35'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 20:18:35'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 20:18:35'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 20:18:35'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 20:18:35'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 20:18:35'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:18:35'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:18:35'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:18:35'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:18:35'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:18:40'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:19:28'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:21:14'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:30:10' prior: 50536443 overrides: 50536372!
+ anAdder 
	 (anAdder isKindOf: Entero) ifTrue: [
		^self class with: value + anAdder integerValue
	]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:30:29' prior: 50536825 overrides: 50536372!
+ anAdder 
	 (anAdder isKindOf: Entero) ifTrue: [
		^self class with: value + anAdder integerValue
	].
	(anAdder isKindOf: Fraccion) ifTrue: [
		^self class with: value + anAdder integerValue
	]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:33:13' prior: 50536832 overrides: 50536372!
+ anAdder 
	 (anAdder isKindOf: Entero) ifTrue: [
		^self class with: value + anAdder integerValue
	].
	(anAdder isKindOf: Fraccion) ifTrue: [
		| numerator |
		numerator := anAdder numerator + (anAdder denominator * value)
		^Fraccion with: numerator  over: anAdder denominator
	]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:33:16' prior: 50536842 overrides: 50536372!
+ anAdder 
	 (anAdder isKindOf: Entero) ifTrue: [
		^self class with: value + anAdder integerValue
	].
	(anAdder isKindOf: Fraccion) ifTrue: [
		| numerator |
		numerator := anAdder numerator + (anAdder denominator * value)
		^Fraccion with: numerator over: anAdder denominator
	]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:33:23' prior: 50536855 overrides: 50536372!
+ anAdder 
	 (anAdder isKindOf: Entero) ifTrue: [
		^self class with: value + anAdder integerValue
	].
	(anAdder isKindOf: Fraccion) ifTrue: [
		| numerator |
		numerator := anAdder numerator + (anAdder denominator * value)
		^Fraccion with: numerator over: anAdder denominator
	]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:33:28' prior: 50536868 overrides: 50536372!
+ anAdder 
	 (anAdder isKindOf: Entero) ifTrue: [
		^self class with: value + anAdder integerValue
	].
	(anAdder isKindOf: Fraccion) ifTrue: [
		| numerator |
		numerator := anAdder numerator + (anAdder denominator * value).
		^Fraccion with: numerator over: anAdder denominator
	]! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:33:29'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:33:29'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 20:33:29'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 20:33:29'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:33:29'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:33:29'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 20:33:29'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:33:29'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:33:29'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 20:33:29'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:33:29'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:33:29'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:33:29'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:34:10' prior: 50536881 overrides: 50536372!
+ anAdder 
	 (anAdder isKindOf: Entero) ifTrue: [
		^self class with: value + anAdder integerValue
	].
	(anAdder isKindOf: Fraccion) ifTrue: [
		| numerator |
		numerator := anAdder numerator + (anAdder denominator * value).
		^Fraccion with: numerator over: anAdder denominator
	]! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:34:12'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:34:12'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 20:34:12'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 20:34:12'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:34:12'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:34:12'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 20:34:12'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:34:12'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:34:12'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 20:34:12'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:34:12'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:34:12'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:34:12'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:34:14'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:34:48' prior: 50537030 overrides: 50536372!
+ anAdder 
	 (anAdder isKindOf: Entero) ifTrue: [
		^self class with: value + anAdder integerValue
	].
	(anAdder isKindOf: Fraccion) ifTrue: [
		| numerator |
		numerator := anAdder numerator + (anAdder denominator * self integerValue ).
		^Fraccion with: numerator over: anAdder denominator
	]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:34:49' prior: 50537182 overrides: 50536372!
+ anAdder 
	 (anAdder isKindOf: Entero) ifTrue: [
		^self class with: value + anAdder integerValue
	].
	(anAdder isKindOf: Fraccion) ifTrue: [
		| numerator |
		numerator := anAdder numerator + (anAdder denominator * self integerValue).
		^Fraccion with: numerator over: anAdder denominator
	]! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:34:50'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:34:50'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 20:34:50'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 20:34:50'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:34:50'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:34:50'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 20:34:50'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:34:50'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:34:50'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 20:34:50'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:34:50'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:34:50'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:34:50'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:34:52'!
ERROR!

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:35:48'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:35:48'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 20:35:48'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 20:35:48'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:35:48'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:35:48'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 20:35:48'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:35:48'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:35:48'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 20:35:48'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:35:48'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:35:48'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:35:48'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:35:50'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:36:22' prior: 50537195 overrides: 50536372!
+ anAdder 
	 (anAdder isKindOf: Entero) ifTrue: [
		^self class with: value + anAdder integerValue
	].
	(anAdder isKindOf: Fraccion) ifTrue: [
		| numerator |
		numerator := anAdder numerator + (anAdder denominator * self).
		^Fraccion with: numerator over: anAdder denominator
	]! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:36:22'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:36:22'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:36:22'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:36:22'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:36:22'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:36:22'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:36:22'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:36:22'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:36:22'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:36:22'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:36:22'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:36:23'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 20:36:23'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 20:36:23'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:36:23'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:36:23'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 20:36:23'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:36:23'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:36:23'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 20:36:23'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:36:23'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:36:23'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:36:23'!
ERROR!

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:37:25'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 20:37:25'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 20:37:25'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:37:25'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:37:25'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 20:37:25'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:37:25'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:37:25'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 20:37:25'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 20:37:25'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:37:26'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:37:26'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:37:26'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:37:26'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:37:30'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:38:21' prior: 50536567 overrides: 50536372!
+ anAdder 
	
	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		
	].
	(anAdder isKindOf: Fraccion) ifTrue: [
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^newNumerator / newDenominator 
	]! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:39:06' prior: 50537774 overrides: 50536372!
+ anAdder 
	
	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator
	].
	(anAdder isKindOf: Fraccion) ifTrue: [
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
	]

	^newNumerator / newDenominator ! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:39:15'!
ERROR!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:39:15'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 20:39:15'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 20:39:15'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:39:15'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:39:15'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:39:15'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 20:39:15'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:39:15'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:39:15'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:39:16'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:39:16'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 20:39:16'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 20:39:16'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 20:39:16'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 20:39:16'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 20:39:16'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 20:39:16'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 20:39:16'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:39:16'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:39:16'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:39:16'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:39:16'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:39:32' prior: 50537486 overrides: 50536372!
+ anAdder 
	 (anAdder isKindOf: Entero) ifTrue: [
		^self class with: value + anAdder integerValue
	].
	(anAdder isKindOf: Fraccion) ifTrue: [
		| newNumerator |
		newNumerator := anAdder numerator + (anAdder denominator * self).
		^Fraccion with: newNumerator over: anAdder denominator
	]! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:39:33'!
ERROR!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:39:33'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 20:39:33'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 20:39:33'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:39:33'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:39:33'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:39:33'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 20:39:33'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:39:33'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:39:33'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 20:39:33'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:39:33'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:39:33'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:39:33'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:39:48' prior: 50537941 overrides: 50536372!
+ anAdder 
	 (anAdder isKindOf: Entero) ifTrue: [
		^self class with: value + anAdder integerValue
	].
	(anAdder isKindOf: Fraccion) ifTrue: [
		| newNumerator |
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newNumerator / anAdder denominator
	]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:39:55' prior: 50538090 overrides: 50536372!
+ anAdder 
	 (anAdder isKindOf: Entero) ifTrue: [
		^self class with: value + anAdder integerValue
	].
	(anAdder isKindOf: Fraccion) ifTrue: [
		| newNumerator |
		newNumerator := anAdder numerator + (anAdder denominator * self).
		^newNumerator / anAdder denominator
	]! !
!Entero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:40:19' prior: 50538103 overrides: 50536372!
+ anAdder 
	 (anAdder isKindOf: Entero) ifTrue: [
		^self class with: value + anAdder integerValue
	].
	(anAdder isKindOf: Fraccion) ifTrue: [
		| newNumerator newDenominator|
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator  := anAdder denominator.
		
		^newNumerator / newDenominator.
	]! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:40:21'!
ERROR!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:40:21'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 20:40:21'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 20:40:21'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:40:21'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:40:21'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:40:21'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 20:40:21'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:40:21'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:40:21'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 20:40:21'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:40:21'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:40:21'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:40:21'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:40:25'!
ERROR!

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:41:04'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:41:04'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:41:04'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:41:04'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:41:04'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:41:04'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:41:04'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:41:04'!
ERROR!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:41:04'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:41:04'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:41:05'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 20:41:05'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 20:41:05'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:41:05'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:41:05'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:41:05'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 20:41:05'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:41:05'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:41:05'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 20:41:05'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:41:05'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:41:05'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:41:05'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:41:06'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:41:40' prior: 50537788 overrides: 50536372!
+ anAdder 
	
	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator
	].
	(anAdder isKindOf: Fraccion) ifTrue: [
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
	]

	^(newNumerator / newDenominator)! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:41:45'!
ERROR!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:41:45'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 20:41:45'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 20:41:45'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:41:45'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:41:45'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:41:45'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 20:41:45'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:41:45'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:41:45'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 20:41:45'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:41:45'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:41:45'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:41:45'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:41:47'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'HernanWilkinson 5/7/2016 23:14' prior: 50538408 overrides: 50536372!
+ anAdder 
	
	| newNumerator newDenominator |
	
	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
	
	^newNumerator / newDenominator ! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:42:48'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:42:48'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:42:48'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:42:48'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:42:48'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:42:48'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:42:48'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:42:48'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:42:49'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 20:42:49'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 20:42:49'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:42:49'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:42:49'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 20:42:49'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:42:49'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:42:49'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 20:42:49'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:42:49'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:42:49'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:42:49'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:42:55'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:43:42' prior: 50538565 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator
	].

	(anAdder isKindOf: Fraccion) ifTrue: [
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
	]

	^newNumerator / newDenominator ! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:43:47'!
ERROR!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:43:47'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 20:43:47'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 20:43:47'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:43:47'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:43:47'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:43:47'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 20:43:47'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:43:47'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:43:47'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 20:43:47'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:43:47'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:43:47'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:43:47'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:44:06'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:44:48' prior: 50538715 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator
	].

	(anAdder isKindOf: self) ifTrue: [
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
	]

	^newNumerator / newDenominator ! !

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:44:55'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:44:58'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:46:58' prior: 50538871 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator
	].

	(anAdder isKindOf: self class) ifTrue: [
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
	]

	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:48:11' prior: 50538895 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator
		^newNumerator / newDenominator 
	].


		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.


	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:48:58' prior: 50538912 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator.
		^newNumerator / newDenominator .
	].

	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
	
	^newNumerator / newDenominator .! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:49:01'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 20:49:01'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 20:49:01'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:49:01'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:49:01'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 20:49:01'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:49:01'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:49:01'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 20:49:01'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:49:01'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:49:01'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:49:01'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:48:11' prior: 50538929 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator
		^newNumerator / newDenominator 
	].


		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.


	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:46:58' prior: 50539082 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator
	].

	(anAdder isKindOf: self class) ifTrue: [
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
	]

	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:50:26' prior: 50539099 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator
	].

	(anAdder isKindOf: Fraccion) ifTrue: [
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
	]

	^newNumerator / newDenominator ! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:50:42'!
ERROR!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 20:50:42'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 20:50:42'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 20:50:42'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 20:50:42'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 20:50:42'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:50:42'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 20:50:42'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 20:50:42'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 20:50:42'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 20:50:42'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 20:50:42'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 20:50:42'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 20:50:42'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:50:50'!
ERROR!

anAdder!

anAdder isKindOf: Fraccion!

(anAdder isKindOf: Fraccion)!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:54:09' prior: 50539116 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator
	].

	(anAdder isKindOf: self class) ifTrue: [
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
	]

	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:54:31' prior: 50539274 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator
	].

	(anAdder isKindOf: Fraccion) ifTrue: [
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
	]

	^newNumerator / newDenominator ! !

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:55:07'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:55:12'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:55:18'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:56:40'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 20:56:51'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:59:20' prior: 50538116 overrides: 50536372!
+ anAdder 
	 (anAdder isKindOf: Entero) ifTrue: [
		^self class with: value + anAdder integerValue
	].
	(anAdder isKindOf: Fraccion) ifTrue: [
		| newNumerator newDenominator|
		
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator  := anAdder denominator.
		
		^newNumerator / newDenominator.
	]! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 20:59:52' prior: 50539291 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator.
		
		^newNumerator / newDenominator 
	].

	
	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
	

	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 21:00:00' prior: 50539338 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator.
		
		^newNumerator / newDenominator 
	].

	(anAdder isKindOf: Fraccion) ifTrue: [
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
	]

	^newNumerator / newDenominator ! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 21:00:04'!
ERROR!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 21:00:04'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 21:00:04'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 21:00:04'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 21:00:04'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 21:00:04'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 21:00:04'!
ERROR!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 21:00:04'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 21:00:04'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 21:00:04'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 21:00:04'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 21:00:04'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 21:00:04'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 21:00:04'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 21:00:07'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 21:00:23' prior: 50539355 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator.
		
		^newNumerator / newDenominator 
	].

	newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.	

	^newNumerator / newDenominator ! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 21:00:33'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 21:00:33'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 21:00:33'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 21:00:33'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 21:00:33'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 21:00:33'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 21:00:33'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 21:00:33'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 21:00:33'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 21:00:33'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 21:00:33'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 21:00:33'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 21:01:19' prior: 50539512 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator.
		
		^newNumerator / newDenominator 
	].

	(anAdder isKindOf: Fraccion ) ifTrue: [

		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.	
	]

	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 21:01:27' prior: 50539665 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator.
	].

	(anAdder isKindOf: Fraccion) ifTrue: [

		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.	
	]

	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 21:01:31' prior: 50539684 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator.
	].

	(anAdder isKindOf: Fraccion) ifTrue: [
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.	
	]

	^newNumerator / newDenominator ! !

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 21:01:53'!
ERROR!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 21:01:53'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 21:02:07' prior: 50539701 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator.
	].

	(anAdder isKindOf: Fraccion) ifTrue: [
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.	
	]

	^ newNumerator / newDenominator ! !

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 21:02:13'!
ERROR!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 21:02:36' prior: 50539725 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator.
	].

	(anAdder isKindOf: Fraccion) ifTrue: [
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.	
	]

	^newNumerator / newDenominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'mg 4/12/2024 21:03:05' prior: 50539746 overrides: 50536372!
+ anAdder 

	| newNumerator newDenominator |
	
	(anAdder isKindOf: Entero) ifTrue: [
		newNumerator := anAdder numerator + (anAdder denominator * self).
		newDenominator := anAdder denominator.
	].

	(anAdder isKindOf: Fraccion) ifTrue: [
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.	
	].

	^newNumerator / newDenominator ! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'mg 4/12/2024 21:03:08'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'mg 4/12/2024 21:03:08'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'mg 4/12/2024 21:03:08'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'mg 4/12/2024 21:03:08'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'mg 4/12/2024 21:03:08'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'mg 4/12/2024 21:03:08'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'mg 4/12/2024 21:03:08'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'mg 4/12/2024 21:03:08'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'mg 4/12/2024 21:03:08'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'mg 4/12/2024 21:03:08'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'mg 4/12/2024 21:03:08'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'mg 4/12/2024 21:03:08'!
ERROR!